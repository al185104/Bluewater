@using Bluewater.Server.Components.Pages.Schedule;
@attribute [Authorize(Roles = "SuperAdmin")]
@using Bluewater.Server.Global;
@using Bluewater.UseCases.Schedules;
@using Bluewater.UseCases.Shifts;
@inject IGlobalService GlobalService;
@implements IDialogContentComponent<ScheduleFormDTO>

<FluentDialogBody OnAfterRenderAsync="@InitializeDialogAsync()">
    <FluentGrid Spacing="2">
        <FluentGridItem xs="12"><h4>Override Schedule</h4></FluentGridItem> 
        <FluentGridItem xs="6"><h5 style="text-align: left;">@Content.Name</h5></FluentGridItem>
        <FluentGridItem xs="6"><h5 style="text-align: right;">@GetWeekString()</h5></FluentGridItem>
        <FluentGridItem xs="11">
            @* add a lambda function to update the isUpdated property when @onchange is executed *@
            <FluentSelect TOption="ShiftDTO"
                Label="Sunday Shift"
                Items="@shifts"
                Placeholder="Select override Sunday shift"
                OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.SundayShift!.Shift"
                @onchange="@(e => Content.SundayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.SundayShift))"/>
        </FluentGridItem>
        
        <FluentGridItem xs="11">
            <FluentSelect TOption="ShiftDTO"
                Label="Monday Shift"
                Items="@shifts"
                Placeholder="Select override Monday shift"
                          OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.MondayShift!.Shift"
                @onchange="@(e => Content.MondayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.MondayShift))"/>
        </FluentGridItem>

        <FluentGridItem xs="11">
            <FluentSelect TOption="ShiftDTO"
                Label="Tuesday Shift"
                Items="@shifts"
                Placeholder="Select override Tuesday shift"
                          OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.TuesdayShift!.Shift"
                @onchange="@(e => Content.TuesdayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.TuesdayShift))"/>
        </FluentGridItem>

        <FluentGridItem xs="11">
            <FluentSelect TOption="ShiftDTO"
                Label="Wednesday Shift"
                Items="@shifts"
                Placeholder="Select override Wednesday shift"
                          OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.WednesdayShift!.Shift"
                @onchange="@(e => Content.WednesdayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.WednesdayShift))"/>
        </FluentGridItem>

        <FluentGridItem xs="11">
            <FluentSelect TOption="ShiftDTO"
                Label="Thursday Shift"
                Items="@shifts"
                Placeholder="Select override Thursday shift"
                          OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.ThursdayShift!.Shift"
                @onchange="@(e => Content.ThursdayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.ThursdayShift))"/>
        </FluentGridItem>

        <FluentGridItem xs="11">
            <FluentSelect TOption="ShiftDTO"
                Label="Friday Shift"
                Items="@shifts"
                Placeholder="Select override Friday shift"
                          OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.FridayShift!.Shift"
                @onchange="@(e => Content.FridayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.FridayShift))"/>
        </FluentGridItem>

        <FluentGridItem xs="11">
            <FluentSelect TOption="ShiftDTO"
                Label="Saturday Shift"
                Items="@shifts"
                Placeholder="Select override Saturday shift"
                          OptionText="@(o => o == null ? "--" : $"{o.Name}   :   [{o.ShiftStartTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftBreakTime?.ToString("h:mm:ss tt") ?? "--"}]   [{o.ShiftBreakEndTime?.ToString("h:mm:ss tt") ?? "--"} - {o.ShiftEndTime?.ToString("h:mm:ss tt") ?? "--"}]   ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.SaturdayShift!.Shift"
                @onchange="@(e => Content.SaturdayShift!.IsUpdated = true)"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1" Style="display: flex; align-items: flex-end;">
            <FluentButton aria-label="Remove shift" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveShift(Content.SaturdayShift))"/>
        </FluentGridItem>

    </FluentGrid>
</FluentDialogBody>


@code{
    [Parameter]
    public ScheduleFormDTO Content { get; set; } = default!;
    private List<ShiftDTO> shifts = new();
    bool isFirstLoad = false;

    private Task InitializeDialogAsync()
    {
        if (!isFirstLoad)
        {
            isFirstLoad = true;
            shifts = GlobalService.Shifts.ToList() ?? new List<ShiftDTO>();
        }
        return Task.CompletedTask;
    }

    private string GetWeekString()
    {
        var (startDate, endDate) = GlobalService.GetStartDateAndEndDateOfWeekByDate(new DateTime(Content.SundayShift!.ScheduleDate.Year, Content.SundayShift!.ScheduleDate.Month, Content.SundayShift!.ScheduleDate.Day));
        return $"{startDate.ToString("MMM/dd")} - {endDate.ToString("MMM/dd")}";
    }

    private void RemoveShift(ShiftInfo? shiftinfo) {
        if(shiftinfo == null) return;

        shiftinfo.IsUpdated = true;
        shiftinfo.Shift = null; 
    }
}