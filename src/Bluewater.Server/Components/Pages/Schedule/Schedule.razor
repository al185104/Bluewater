@page "/schedule"
@rendermode InteractiveServer

@using Bluewater.Server.Components.Pages.Schedule
@using Bluewater.Server.Global
@using Bluewater.UseCases.Schedules
@using Bluewater.UseCases.Schedules.Create
@using Bluewater.UseCases.Schedules.Delete
@using Bluewater.UseCases.Schedules.List
@using Bluewater.UseCases.Schedules.Update
@using Bluewater.UseCases.Shifts
@using MediatR
@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<FluentDialogProvider/>

<PageTitle>Schedules</PageTitle>

<h3>Schedules</h3>

<FluentStack HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">
    <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronLeft())" Appearance="Appearance.Accent" OnClick="@(async() => await LoadScheduleAsync(searchDate = searchDate.AddDays(-7)))"/>
    <h5 style="margin: 0; vertical-align: middle;">from @startDate.ToString("MMM-dd") to @endDate.ToString("MMM-dd")</h5>
    <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronRight())" Appearance="Appearance.Accent" OnClick="@(async() => await LoadScheduleAsync(searchDate = searchDate.AddDays(7)))"/>
</FluentStack>


<FluentDataGrid Items="@FilteredItems" Pagination="@pagination"
    Style="height: 550px;overflow:auto;"
    GridTemplateColumns="1fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.3fr">
    <PropertyColumn Title="Employee" Property="@(p => p.Name)" Style="vertical-align: bottom;" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleEmployeeFilter" @bind-Value:after="HandleClear" Placeholder="Employee name..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>        
    </PropertyColumn>
    <PropertyColumn Title="Section" Property="@(p => p.Section)" Style="vertical-align: bottom;" Sortable="true"/>
    <PropertyColumn Title="Charging" Property="@(p => p.Charging)" Style="vertical-align: bottom;" Sortable="true"/>


    @foreach(var day in Enumerable.Range(0, 7))
    {
        <TemplateColumn Title="@GetColumnTitle(day)">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                @if(context.Shifts[day].IsDefault){
                    <FluentIcon Value="@(new Icons.Filled.Size16.Circle())" />
                }
                else{
                    <FluentIcon Value="@(new Icons.Regular.Size16.Circle())" />
                }
                <h6 style="margin: 0; vertical-align: bottom;"><bold>@(GetSelectedShiftName(context, day))</bold></h6>
            </FluentStack>
        </TemplateColumn>
    }
    <TemplateColumn Title="Edit" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(async() => await EditScheduleAsync(context))"/>
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code{
    string nameFilter = string.Empty;        
    private bool isBusy = false;
    public IQueryable<EmployeeScheduleDTO> EmployeeSchedules { get; set; } = default!;
    private DateTime searchDate = DateTime.Now;
    private DateOnly startDate;
    private DateOnly endDate;
    private List<ShiftDTO> shifts = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<EmployeeScheduleDTO>? FilteredItems
    {
        get
        {
            var result = EmployeeSchedules;
            if (result is not null && !string.IsNullOrEmpty(nameFilter))
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            return result;
        }
    }                    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isBusy = true;
            await LoadScheduleAsync(searchDate);
            shifts = GlobalService.Shifts.ToList() ?? new List<ShiftDTO>();
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task LoadScheduleAsync(DateTime date)
    {
        try 
        {
            isBusy = true;
            var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfWeekByDate(date);
            startDate = _startDate;
            endDate = _endDate;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListScheduleQuery(null, null, _startDate, _endDate));
                if (result.IsSuccess)
                    EmployeeSchedules = result.Value.AsQueryable();
            }
        }
        finally
        {
            isBusy = false;
        }
    }

    private string GetColumnTitle(int day)
    {
        DateTime today = searchDate;
        // Calculate the start of the week (Sunday)
        DateTime startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        DateTime targetDate = startOfWeek.AddDays(day);

        return $"{targetDate.ToString("MM/dd")} ({targetDate.DayOfWeek.ToString()[..3]})";
    }    

    private bool IsShiftSelected(EmployeeScheduleDTO employee, int day, ShiftDTO shift)
    {
        return employee.Shifts.Count > day && employee.Shifts[day].Shift.Id == shift.Id;
    }

    private ShiftDTO? GetSelectedShift(EmployeeScheduleDTO employee, int day)
    {        
        return employee.Shifts.Count > day ? employee.Shifts[day].Shift : null;
    }

    private string? GetSelectedShiftName(EmployeeScheduleDTO employee, int day)
    {
        if(employee.Shifts.Count > day)
        {
            return $"{employee.Shifts[day]?.Shift?.Name}";
        }
        return null;
    }    

    private List<ShiftDTO> ListOfShifts()
    {
        return new List<ShiftDTO>(shifts);
    }

    private async Task EditScheduleAsync(EmployeeScheduleDTO employeeSchedule)
    {
        var anySchedId = employeeSchedule.Shifts.Any(x => x.ScheduleId != Guid.Empty);

        var sched = new ScheduleFormDTO(
            employeeSchedule.EmployeeId,
            employeeSchedule.Name,
            employeeSchedule.Shifts[0] ?? null,
            employeeSchedule.Shifts[1] ?? null,
            employeeSchedule.Shifts[2] ?? null,
            employeeSchedule.Shifts[3] ?? null,
            employeeSchedule.Shifts[4] ?? null,
            employeeSchedule.Shifts[5] ?? null,
            employeeSchedule.Shifts[6] ?? null
        );

        IDialogReference _dialog = await DialogService.ShowPanelAsync<ScheduleForm>(sched, new DialogParameters<ScheduleFormDTO>
        {
            Title = anySchedId ? "Update schedule" : "Create Schedule",
            Alignment = HorizontalAlignment.Right,
            Content = sched,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = anySchedId ? "Update" : "Create",
            SecondaryAction = "Cancel",
            Width = "650px",
        });

        DialogResult result = await _dialog.Result;
        await HandleUpdatePanelAsync(result);        
    }

    private async Task HandleUpdatePanelAsync(DialogResult result)
    {
        try {
            isBusy = true;
            if (result.Cancelled) return;
            if (result.Data is not null)
            {
                var e = result.Data as ScheduleFormDTO;
                if(e != null)
                {
                    await SetupDaysSchedulesAsync(e);   
                    await LoadScheduleAsync(searchDate);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    // to update - this can be placed in a list of days
    async Task SetupDaysSchedulesAsync(ScheduleFormDTO e)
    {
        #region SUNDAY
        // evaluate sunday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.SundayShift!.IsUpdated) {
            if(e.SundayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.SundayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.SundayShift.ScheduleId));
                    }
                }
                else{
                    if(e.SundayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.SundayShift!.Shift!.Id, e.SundayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.SundayShift.ScheduleId, e.EmployeeId, e.SundayShift!.Shift!.Id, e.SundayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
                if(e.SundayShift!.Shift != null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.SundayShift!.Shift!.Id, e.SundayShift!.ScheduleDate, IsDefault: false));
                    }
                }
            }
        }
        #endregion
    
        #region MONDAY
        // evaluate monday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.MondayShift!.IsUpdated) {
            if(e.MondayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.MondayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.MondayShift.ScheduleId));
                    }
                }
                else{
                    if(e.MondayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.MondayShift!.Shift!.Id, e.MondayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.MondayShift.ScheduleId, e.EmployeeId, e.MondayShift!.Shift!.Id, e.MondayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
                if(e.MondayShift!.Shift != null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.MondayShift!.Shift!.Id, e.MondayShift!.ScheduleDate, IsDefault: false));
                    }
                }
            }
        }
        #endregion

        #region TUESDAY 
        // evaluate tuesday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.TuesdayShift!.IsUpdated ){
            if(e.TuesdayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.TuesdayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.TuesdayShift.ScheduleId));
                    }
                }
                else{
                    if(e.TuesdayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.TuesdayShift!.Shift!.Id, e.TuesdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.TuesdayShift.ScheduleId, e.EmployeeId, e.TuesdayShift!.Shift!.Id, e.TuesdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
                if(e.TuesdayShift!.Shift != null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.TuesdayShift!.Shift!.Id, e.TuesdayShift!.ScheduleDate, IsDefault: false));
                    }
                }
            }
        }
        #endregion

        #region WEDNESDAY
        // evaluate wednesday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.WednesdayShift!.IsUpdated) {   
            if(e.WednesdayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.WednesdayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.WednesdayShift.ScheduleId));
                    }
                }
                else{
                    if(e.WednesdayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.WednesdayShift!.Shift!.Id, e.WednesdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.WednesdayShift.ScheduleId, e.EmployeeId, e.WednesdayShift!.Shift!.Id, e.WednesdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
            if(e.WednesdayShift!.Shift != null) {
                using (var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.WednesdayShift!.Shift!.Id, e.WednesdayShift!.ScheduleDate, IsDefault: false));
                }
            }
        }
        }
        #endregion

        #region THURSDAY
        // evaluate thursday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.ThursdayShift!.IsUpdated) {
            if(e.ThursdayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.ThursdayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.ThursdayShift.ScheduleId));
                    }
                }
                else{
                    if(e.ThursdayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.ThursdayShift!.Shift!.Id, e.ThursdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.ThursdayShift.ScheduleId, e.EmployeeId, e.ThursdayShift!.Shift!.Id, e.ThursdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
                if(e.ThursdayShift!.Shift != null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.ThursdayShift!.Shift!.Id, e.ThursdayShift!.ScheduleDate, IsDefault: false));
                    }
                }
            }
        }
        #endregion

        #region FRIDAY
        // evaluate friday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.FridayShift!.IsUpdated) {
            if(e.FridayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.FridayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.FridayShift.ScheduleId));
                    }
                }
                else{
                    if(e.FridayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.FridayShift!.Shift!.Id, e.FridayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.FridayShift.ScheduleId, e.EmployeeId, e.FridayShift!.Shift!.Id, e.FridayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
            if(e.FridayShift!.Shift != null) {
                using (var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.FridayShift!.Shift!.Id, e.FridayShift!.ScheduleDate, IsDefault: false));
                }
            }
        }
        }
        #endregion

        #region SATURDAY
        // evaluate saturday schedule
        // if there's an existing schedule, check if it's default or not
        if(e.SaturdayShift!.IsUpdated) {
            if(e.SaturdayShift!.ScheduleId != Guid.Empty) { 
                // check first if the selected shift is not null. if null, means the schedule is cleared, then delete the schedule
                if(e.SaturdayShift!.Shift == null) {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new DeleteScheduleCommand(e.SaturdayShift.ScheduleId));
                    }
                }
                else{
                    if(e.SaturdayShift!.IsDefault) { // if default is true, then create an override
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.SaturdayShift!.Shift!.Id, e.SaturdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                    else { // if default is false, then update the schedule
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var ret = await mediator.Send(new UpdateScheduleCommand(e.SaturdayShift.ScheduleId, e.EmployeeId, e.SaturdayShift!.Shift!.Id, e.SaturdayShift!.ScheduleDate, IsDefault: false));
                        }
                    }
                }
            }
            else { // if schedule id is empty, then create a new schedule
            if(e.SaturdayShift!.Shift != null) {
                using (var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    var ret = await mediator.Send(new CreateScheduleCommand(e.EmployeeId, e.SaturdayShift!.Shift!.Id, e.SaturdayShift!.ScheduleDate, IsDefault: false));
                }
            }
        }
        }
        #endregion
    }

    private void HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
            nameFilter = value;
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }


}