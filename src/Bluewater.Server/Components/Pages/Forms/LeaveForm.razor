@page "/leave"
@rendermode InteractiveServer
@attribute [Authorize]
@using Bluewater.UseCases.LeaveCredits
@using MediatR
@using Bluewater.Server.Global
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Bluewater.UseCases.Employees
@using Bluewater.UseCases.Leaves;

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<PageTitle>Leaves</PageTitle>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Top">
    <FluentLabel Style="margin-top: 0px;"><strong>Employee: @Employee?.Name</strong></FluentLabel>
    <FluentLabel>Department: @Employee?.Department</FluentLabel>
    <FluentLabel>Section: @Employee?.Section</FluentLabel>
    <FluentLabel Style="margin-bottom: 10px;">Charging: @Employee?.Charging</FluentLabel>
</FluentStack>

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom" HorizontalGap="10">
    <div>
        <FluentSearch Autofocus=true @onchange="@(async(args) => await HandleEmployeeFilter(args))" @bind-Value=nameFilter @bind-Value:after="HandleClear" Label="Search employee" Placeholder="Name or Barcode..." Style="width: 250px;"/>
    </div>
    <div>
        <FluentDatePicker Label="Start Date" Value="@InputLeave!.StartDate" ValueChanged="@(e => InputLeave!.StartDate = e)"/>
    </div>
    <div>
        <FluentDatePicker Label="End Date" Value="@InputLeave!.EndDate" ValueChanged="@(e => InputLeave!.EndDate = e)"/>
    </div>
    <div>
        <FluentSelect TOption="LeaveCreditDTO"
            Label="Leave Type"
            Items="@LeaveCredits"
            OptionText="@(o => o.Description)"
            Style="width: 100%">
        </FluentSelect>        
    </div>
    <div>
        <FluentSwitch @bind-Value="@InputLeave!.IsHalfDay" Label="Type">
            <span slot="checked-message">Full day</span>
            <span slot="unchecked-message">Half day</span>
        </FluentSwitch>        
    </div>
    <FluentButton Text="Add" Appearance="Appearance.Accent" OnClick="@(async() => await AddLeaveAsync())" >Add</FluentButton>
</FluentStack>

@code {
    string nameFilter = string.Empty;
    private EmployeeShortDTO? Employee = default!;
    private LeaveDTO? InputLeave = new();
    private IQueryable<LeaveCreditDTO>? LeaveCredits;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {    
        if(!firstRender) {
            // get all the available leave credits first.
            LeaveCredits = GlobalService.LeaveCredits.AsQueryable();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value){
            nameFilter = value;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new GetEmployeeShortQuery(nameFilter));
                if (result.IsSuccess)
                    Employee = result.Value;
            }
        }
    }    

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter)) {
            nameFilter = string.Empty;
            Employee = default!;
        }
    }          

    async Task AddLeaveAsync(){
        await Task.Delay(10);
    } 
}

