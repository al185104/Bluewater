@page "/undertime"
@using Bluewater.UseCases.Forms.Undertimes
@using Bluewater.UseCases.Forms.Undertimes.List
@using MediatR

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@using Bluewater.Server.Global
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<PageTitle>Undertimes</PageTitle>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code {
    private bool isBusy = false;
    private IQueryable<UndertimeDTO> Undertimes = default!;
    protected override async Task OnInitializedAsync()
    {
        await LoadDeductionsAsync();
    }

    async Task LoadDeductionsAsync() {
        try {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListUndertimeQuery(null, null));
                if (result.IsSuccess)
                    Undertimes = result.Value.AsQueryable();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }        
}