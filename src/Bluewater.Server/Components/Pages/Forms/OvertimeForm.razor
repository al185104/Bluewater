@page "/overtime"
@rendermode InteractiveServer
@using Bluewater.UseCases.Employees
@using Bluewater.UseCases.Forms.Overtimes
@using Bluewater.UseCases.Forms.Overtimes.Create
@using Bluewater.UseCases.Forms.Overtimes.Delete
@using Bluewater.UseCases.Forms.Overtimes.List
@using Bluewater.UseCases.Helpers
@using MediatR

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@using Bluewater.Server.Global
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<PageTitle>Overtimes</PageTitle>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Top">
    <FluentLabel Style="margin-top: 0px;"><strong>Employee: @Employee?.Name</strong></FluentLabel>
    <FluentLabel>Department: @Employee?.Department</FluentLabel>
    <FluentLabel>Section: @Employee?.Section</FluentLabel>
    <FluentLabel Style="margin-bottom: 0px;">Charging: @Employee?.Charging</FluentLabel>
</FluentStack>
@* DateTime? startDate, DateTime? endDate, int? approvedHours, string? remarks *@
<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom" HorizontalGap="10">
    <div>
        <FluentSearch Autofocus=true @onchange="@(async(args) => await HandleEmployeeFilter(args))" @bind-Value=nameFilter @bind-Value:after="HandleClear" Label="Search employee" Placeholder="Name..." Style="width: 250px;"/>
    </div>
    <div>
        <FluentDatePicker Label="Start Date" Value="@InputOvertime!.StartDate" ValueChanged="@(e => InputOvertime!.StartDate = e)"/>
    </div>
    <div>
        <FluentDatePicker Label="End Date" Value="@InputOvertime!.EndDate" ValueChanged="@(e => InputOvertime!.EndDate = e)"/>
    </div>
    <div>
        <FluentNumberField Label="Approved Hours" @bind-Value="InputOvertime!.ApprovedHours" Style="width: 250px;"/>
    </div>
    <div>
        <FluentTextField Label="Remarks" @bind-Value="InputOvertime!.Remarks" Style="width: 250px;"/>
    </div>
    <FluentButton Text="Add" Appearance="Appearance.Accent" OnClick="@(async() => await AddOvertimeAsync())" >Add</FluentButton>
</FluentStack>

<FluentDataGrid Id="shiftsGrid" Items="@Overtimes" TGridItem="OvertimeDTO">
    <PropertyColumn Title="Start Time" Property="@(c => c!.StartDate)" Align="Align.Start" />
    <PropertyColumn Title="End Time" Property="@(c => c!.EndDate)" Align="Align.Start" />
    <PropertyColumn Title="Approved Hours" Property="@(c => c!.ApprovedHours)" Align="Align.Start" />
    <PropertyColumn Title="Remarks" Property="@(c => c!.Remarks)" Align="Align.Start" />
    <PropertyColumn Title="Status" Property="@(c => c!.Status)" Align="Align.Start" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteOvertimeAsync(context))"/>
    </TemplateColumn>
</FluentDataGrid>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code {
    string nameFilter = string.Empty;
    private EmployeeShortDTO? Employee = default!;
    private List<EnumOption> overtimeTypes = new();
    private bool isBusy = false;    
    private IQueryable<OvertimeDTO> Overtimes = default!;
    private OvertimeDTO? InputOvertime = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDeductionsAsync();
    }

    async Task LoadDeductionsAsync() {
        try {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListOvertimeQuery(null, null));
                if (result.IsSuccess)
                    Overtimes = result.Value.AsQueryable();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    async Task DeleteOvertimeAsync(OvertimeDTO context)
    {
        if(Employee == null || Employee.Id == Guid.Empty) {
            await DialogService.ShowWarningAsync("There's no current employee searched yet. Please search an employee first.", "Warning");
            return;
        }        
        try
        {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var deleteResult = await mediator.Send(new DeleteOvertimeCommand(context.Id));
                if (deleteResult.IsSuccess)
                {
                    await LoadDeductionsAsync();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task AddOvertimeAsync() {
        try {
            isBusy = true;

            if(Employee == null || Employee.Id == Guid.Empty){
                await DialogService.ShowWarningAsync("There's no current employee searched yet. Please search an employee first.", "Warning");
                return;
            }

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateOvertimeCommand(Employee.Id, InputOvertime!.StartDate, InputOvertime!.EndDate, InputOvertime!.ApprovedHours, InputOvertime!.Remarks));
                if (result.IsSuccess)
                {
                    await LoadDeductionsAsync();
                    InputOvertime = new();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }

    private async Task HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value){
            nameFilter = value;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new GetEmployeeShortQuery(nameFilter));
                if (result.IsSuccess)
                    Employee = result.Value;
            }
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter)) {
            nameFilter = string.Empty;
            Employee = default!;
        }
    }       
}