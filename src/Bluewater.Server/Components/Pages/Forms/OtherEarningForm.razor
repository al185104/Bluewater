@page "/otherearning"
@rendermode InteractiveServer
@using Bluewater.UseCases.Employees
@using Bluewater.UseCases.Forms.OtherEarnings
@using Bluewater.UseCases.Forms.OtherEarnings.Create
@using Bluewater.UseCases.Forms.OtherEarnings.Delete
@using Bluewater.UseCases.Forms.OtherEarnings.List
@using Bluewater.UseCases.Helpers
@using Bluewater.UserCases.Forms.Enum
@using MediatR

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@using Bluewater.Server.Global
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<PageTitle>Other Earnings</PageTitle>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Top">
    <FluentLabel Style="margin-top: 0px;"><strong>Employee: @Employee?.Name</strong></FluentLabel>
    <FluentLabel>Department: @Employee?.Department</FluentLabel>
    <FluentLabel>Section: @Employee?.Section</FluentLabel>
    <FluentLabel Style="margin-bottom: 10px;">Charging: @Employee?.Charging</FluentLabel>
</FluentStack>

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom" HorizontalGap="10">
    <div>
        <FluentSearch Autofocus=true @onchange="@(async(args) => await HandleEmployeeFilter(args))" @bind-Value=nameFilter @bind-Value:after="HandleClear" Label="Search employee" Placeholder="Name..." Style="width: 250px;"/>
    </div>
    <div>
        <FluentSelect TOption="EnumOption" Label="Reason" Items="@otherEarningTypes" OptionText="@(o => o.Description)" @onchange=HandleReasonSelected Style="width: 250px;"/>
    </div>    
    <div>
        <FluentNumberField Label="Total Amount" @bind-Value="InputOtherEarning!.TotalAmount" Style="width: 250px;"/>
    </div>
    <div>
        <FluentDatePicker Label="Date" Value="@InputOtherEarning!.Date.ToDateTime()" ValueChanged="@(e => InputOtherEarning!.Date = e.ToDateOnly())"/>
    </div>
    <div>
        <FluentSwitch @bind-Value="@InputOtherEarning!.IsActive" Label="Type">
            <span slot="checked-message">Active</span>
            <span slot="unchecked-message">Inactive</span>
        </FluentSwitch>        
    </div>
    <FluentButton Text="Add" Appearance="Appearance.Accent" OnClick="@(async() => await AddOtherEarningAsync())" >Add</FluentButton>
</FluentStack>

<FluentDataGrid Id="shiftsGrid" Items="@OtherEarnings" TGridItem="OtherEarningDTO">
    <PropertyColumn Title="Name" Property="@(c => c!.Name)" Align="Align.Start" />
    <PropertyColumn Title="Earning Type" Property="@(c => EnumUtilities.GetEnumDescription(c!.EarningType ?? OtherEarningTypeDTO.NotSet))" Align="Align.Start" />
    <PropertyColumn Title="Total Amount" Property="@(c => c!.TotalAmount)" Align="Align.Start" />
    <PropertyColumn Title="Date" Property="@(c => c!.Date)" Align="Align.Start" />
    <TemplateColumn Title="Active">
        <FluentLabel>@(context.IsActive ? "Active" : "Inactive")</FluentLabel>
    </TemplateColumn>
    <PropertyColumn Title="Status" Property="@(c => EnumUtilities.GetEnumDescription(c!.Status ?? ApplicationStatusDTO.NotSet))" Align="Align.Start" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteOtherEarningAsync(context))"/>
    </TemplateColumn>
</FluentDataGrid>

<FluentDialogProvider/>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code {
    string nameFilter = string.Empty;
    private EmployeeShortDTO? Employee = default!;
    private bool isBusy = false;
    private IQueryable<OtherEarningDTO> OtherEarnings = default!;
    private OtherEarningDTO? InputOtherEarning = new();
    private List<EnumOption> otherEarningTypes = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadDeductionsAsync();
        otherEarningTypes = EnumUtilities.GetEnumOptions<OtherEarningTypeDTO>();
    }

    async Task LoadDeductionsAsync() {
        try {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListOtherEarningQuery(null, null));
                if (result.IsSuccess)
                    OtherEarnings = result.Value.AsQueryable();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    private async Task HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value){
            nameFilter = value;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new GetEmployeeShortQuery(nameFilter));
                if (result.IsSuccess)
                    Employee = result.Value;
            }
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter)) {
            nameFilter = string.Empty;
            Employee = default!;
        }
    }

    async Task AddOtherEarningAsync()
    {
        if(Employee == null || Employee.Id == Guid.Empty) {
            await DialogService.ShowWarningAsync("There's no current employee searched yet. Please search an employee first.", "Warning");
            return;
        }
        try
        {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var addResult = await mediator.Send(new CreateOtherEarningCommand(Employee.Id, InputOtherEarning!.EarningType, InputOtherEarning!.TotalAmount, InputOtherEarning!.IsActive, InputOtherEarning!.Date));
                if (addResult.IsSuccess)
                    await LoadDeductionsAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    async Task DeleteOtherEarningAsync(OtherEarningDTO context) {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to delete this record?", "Yes", "No", "Delete");
        var conf = await dialog.Result;
        if (conf.Cancelled) return;
                
        try {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteOtherEarningCommand(context.Id));
                if (result.IsSuccess)
                    await LoadDeductionsAsync();
            }

        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    public void HandleReasonSelected(ChangeEventArgs changeEventArgs)
    {
        InputOtherEarning!.EarningType = EnumUtilities.GetEnumByDescription<OtherEarningTypeDTO>(changeEventArgs.Value?.ToString()!);
    }    
}
