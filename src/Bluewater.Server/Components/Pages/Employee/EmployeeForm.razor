@using Bluewater.Core.EmployeeAggregate.Enum;
@using Bluewater.Core.UserAggregate.Enum;
@using Bluewater.Server.Components.Pages.Employee
@using Bluewater.UseCases.Employees;
@using Bluewater.UseCases.Helpers;
@using System.ComponentModel;
@using System.Reflection;

@using Bluewater.UseCases.Positions;
@using Bluewater.UseCases.Sections;
@using Bluewater.UseCases.Departments;
@using Bluewater.UseCases.Divisions;
@using Bluewater.UseCases.Chargings;
@using Bluewater.UseCases.EmployeeTypes;
@using Bluewater.UseCases.Levels;

@using Bluewater.Server.Global;
@using Bluewater.UseCases.Shifts;
@inject IGlobalService GlobalService;

@implements IDialogContentComponent<EmployeeFormDTO>

<FluentDialogBody OnAfterRenderAsync="@InitializeDialogAsync()">
    <FluentGrid Spacing="2">
        <FluentGridItem xs="12"><h4>Personal information</h4></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Style="width: 100%" Label="First Name" @bind-Value="@Content.FirstName" required /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Style="width: 100%" Label="Last Name" @bind-Value="@Content.LastName" required /></FluentGridItem>
        
        <FluentGridItem xs="6"><FluentTextField Style="width: 100%" Label="Middle Name" @bind-Value="@Content.MiddleName" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentDatePicker Label="Date of Birth" @bind-Value="@Content.DateOfBirth" Style="width: 100%"/></FluentGridItem>
        
        <FluentGridItem xs="6">
            <FluentSelect TOption="EnumOption"
                Label="Gender"
                Items="@genderOptions"
                OptionText="@(o => o.Description)"
                @bind-SelectedOption="@selectedGender"
                Style="width: 100%" 
                @onchange=HandleGenderSelected>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="6">
            <FluentSelect TOption="EnumOption"
                Label="Civil Status"
                Items="@civilStatusOptions"
                OptionText="@(o => o.Description)"
                @bind-SelectedOption="@selectedCivilStatus"
                Style="width: 100%" 
                @onchange=HandleCivilStatusSelected>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="6">
            <FluentSelect TOption="EnumOption"
                Label="Blood Type"
                Items="@bloodTypeOptions"
                OptionText="@(o => o.Description)"
                @bind-SelectedOption="@selectedBloodType"
                Style="width: 100%" 
                @onchange=HandleBloodTypeSelected>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="6">
            <FluentSelect TOption="EnumOption"
                Label="Employment Status"
                Items="@employmentStatusOptions"
                OptionText="@(o => o.Description)"
                @bind-SelectedOption="@selectedEmploymentStatus"
                Style="width: 100%" 
                @onchange=HandleEmploymentStatusSelected>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="6"><FluentNumberField Label="Height (cm)" @bind-Value="@Content.Height" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentNumberField Label="Weight (kg)" @bind-Value="@Content.Weight" Style="width: 100%" /></FluentGridItem>


        <FluentGridItem xs="12"><h4>Contact information</h4></FluentGridItem>

        <FluentGridItem xs="6"><FluentTextField Label="Landline Number" @bind-Value="@Content.TelNumber" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Mobile Number" @bind-Value="@Content.MobileNumber" Style="width: 100%" /></FluentGridItem>        
        <FluentGridItem xs="6"><FluentTextField Label="Address" @bind-Value="@Content.Address" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Provincial Address" @bind-Value="@Content.ProvincialAddress" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Email" @bind-Value="@Content.Email" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Mother's Maiden Name" @bind-Value="@Content.MothersMaidenName" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Father's Name" @bind-Value="@Content.FathersName" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Emergency Contact" @bind-Value="@Content.EmergencyContact" Style="width: 100%"/></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Relationship with Contact" @bind-Value="@Content.RelationshipContact" Style="width: 100%"/></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Contact's Landline Number" @bind-Value="@Content.TelNoContact" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Contact's Mobile Number" @bind-Value="@Content.MobileNoContact" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Contact's Address" @bind-Value="@Content.AddressContact" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"></FluentGridItem>

        <FluentGridItem xs="12"><h4>Educational information</h4></FluentGridItem>

        <FluentGridItem xs="6"><FluentTextField Label="Course Graudated" @bind-Value="@Content.CourseGraduated" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="University Graduated" @bind-Value="@Content.UniversityGraduated" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6">
            <FluentSelect TOption="EnumOption"
                Label="Educational Attainment"
                Items="@educationalAttainmentOptions"
                OptionText="@(o => o.Description)"
                Style="width: 100%" 
                @onchange=HandleEducationalAttainmentSelected>
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="6"></FluentGridItem>

        <FluentGridItem xs="12"><h4>Employment information</h4></FluentGridItem>

        <FluentGridItem xs="6">
            <FluentSelect TOption="EmployeeTypeDTO"
                Label="Type"
                Items="@employeeTypes"
                OptionText="@(o => o.Name)"
                @bind-SelectedOption="@selectedEmployeeType"
                Style="width: 100%" 
                @onchange=HandleEmployeeTypesSelected>
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="6">
            <FluentSelect TOption="LevelDTO"
                Label="Levels"
                Items="@levels"
                OptionText="@(o => o.Name)"
                @bind-SelectedOption="@selectedLevel"
                Style="width: 100%" 
                @onchange=HandleLevelsSelected>
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="6">
            <FluentSelect TOption="PositionDTO"
                Label="@positionLabel"
                Items="@positions"
                OptionText="@(o => o.Name)"
                @bind-SelectedOption="@selectedPosition"
                Style="width: 100%" 
                @onchange=HandlePositionsSelected>
            </FluentSelect>
        </FluentGridItem>  
        <FluentGridItem xs="6">
            <FluentSelect TOption="ChargingDTO"
                Label="Chargings"
                Items="@chargings"
                OptionText="@(o => o.Name)"
                @bind-SelectedOption="@selectedCharging"
                Style="width: 100%" 
                @onchange=HandleChargingsSelected>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="6"><FluentDatePicker Label="Date Hired" @bind-Value="@Content.DateHired" Style="width: 100%"/></FluentGridItem>
        <FluentGridItem xs="6"><FluentDatePicker Label="Date Regularized" @bind-Value="@Content.DateRegularized" Style="width: 100%"/></FluentGridItem>
        <FluentGridItem xs="6"><FluentDatePicker Label="Date Resigned" @bind-Value="@Content.DateResigned" Style="width: 100%"/></FluentGridItem>
        <FluentGridItem xs="6"><FluentDatePicker Label="Date Terminated" @bind-Value="@Content.DateTerminated" Style="width: 100%"/></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="TIN No" @bind-Value="@Content.TinNo" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="SSS No" @bind-Value="@Content.SssNo" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Pagibig No" @bind-Value="@Content.HdmfNo" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="PhilHealth No" @bind-Value="@Content.PhicNo" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Bank Account" @bind-Value="@Content.BankAccount" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"></FluentGridItem>
        <FluentGridItem xs="6"><FluentNumberField Label="Basic Pay" @bind-Value="@Content.BasicPay" Style="width: 100%" @onchange=HandleBasicPayUpdated /></FluentGridItem>
        <FluentGridItem xs="6"><FluentNumberField Label="Daily Rate" @bind-Value="@Content.DailyRate" Style="width: 100%" ReadOnly/></FluentGridItem>
        <FluentGridItem xs="6"><FluentNumberField Label="Hourly Rate" @bind-Value="@Content.HourlyRate" Style="width: 100%" ReadOnly/></FluentGridItem>        
        <FluentGridItem xs="6"><FluentNumberField Label="HDMF Con" @bind-Value="@Content.HDMF_Con" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentNumberField Label="HDMF Er" @bind-Value="@Content.HDMF_Er" Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"></FluentGridItem>

        <FluentGridItem xs="12"><h4>Default Schedule</h4></FluentGridItem>
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Sunday Shift"
                Items="@shifts"
                Placeholder="Select default Sunday shift"
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.SundayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Monday Shift"
                Items="@shifts"
                Placeholder="Select default Monday shift"                
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.MondayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Tuesday Shift"
                Items="@shifts"
                Placeholder="Select default Tuesday shift"
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.TuesdayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>   
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Wednesday Shift"
                Items="@shifts"
                Placeholder="Select default Wednesday shift"
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.WednesdayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>   
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Thursday Shift"
                Items="@shifts"
                Placeholder="Select default Thursday shift"
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.ThursdayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Friday Shift"
                Items="@shifts"
                Placeholder="Select default Friday shift"
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.FridayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentSelect TOption="ShiftDTO"
                Label="Saturday Shift"
                Items="@shifts"
                Placeholder="Select default Saturday shift"
                OptionText="@(o => $"{o.Name}   :   [{o.ShiftStartTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftBreakTime!.Value.ToString("h:mm:ss tt")}]    [{o.ShiftBreakEndTime!.Value.ToString("h:mm:ss tt")} - {o.ShiftEndTime!.Value.ToString("h:mm:ss tt")}]    ({o.BreakHours} break hrs)")"
                @bind-SelectedOption="@Content.SaturdayShift"
                Style="width: 100%">
            </FluentSelect>
        </FluentGridItem>


        <FluentGridItem xs="12"><h4>Login credentials</h4></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Username" @bind-Value="@Content.Username" required Style="width: 100%" /></FluentGridItem>
        <FluentGridItem xs="6"><FluentTextField Label="Password" @bind-Value="@Content.Password" required Style="width: 100%" /></FluentGridItem>

        <FluentGridItem xs="6">
            <FluentSelect TOption="EnumOption"
                Label="Credentials"
                Items="@credentialsOptions"
                OptionText="@(o => o.Description)"
                @bind-SelectedOption="@selectedCredential"
                Style="width: 100%" 
                @onchange=HandleCredentialsSelected>
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="5">
            <FluentSelect TOption="SectionDTO"
                Label="Supervised Group"
                Items="@sections"
                OptionText="@(o => o.Name)"
                @bind-SelectedOption="@supervisedGroup"
                Style="width: 100%" 
                ReadOnly=IsDisableSupervisedGroup()
                @onchange=HandleSupervisedGroupSelected>
            </FluentSelect>
        </FluentGridItem>
        <FluentGridItem xs="1">
            <FluentStack Orientation="Orientation.Vertical" 
                        VerticalAlignment="VerticalAlignment.Center" 
                        VerticalGap="5">
                <FluentLabel>All</FluentLabel>
                <FluentCheckbox @bind-Value="@Content.IsGlobalSupervisor"/>
            </FluentStack>
        </FluentGridItem>

    </FluentGrid>
</FluentDialogBody>

@code{
    [Parameter]
    public EmployeeFormDTO Content { get; set; } = default!;
    private List<EnumOption> genderOptions = new();
    private EnumOption selectedGender = new(null, null);
    private List<EnumOption> civilStatusOptions = new();
    private EnumOption selectedCivilStatus = new(null, null);
    private List<EnumOption> bloodTypeOptions = new();
    private EnumOption selectedBloodType = new(null, null);
    private List<EnumOption> educationalAttainmentOptions = new();
    private EnumOption selectedEducationalAttainment = new(null, null);
    private List<EnumOption> employmentStatusOptions = new();
    private EnumOption selectedEmploymentStatus = new(null, null);
    private List<EnumOption> credentialsOptions = new();
    private EnumOption selectedCredential = new(null, null);
    private List<PositionDTO> positions = new();
    private PositionDTO selectedPosition = new();
    private List<SectionDTO> sections = new();
    private List<DepartmentDTO> departments = new();
    private List<DivisionDTO> divisions = new();
    private List<ChargingDTO> chargings = new();
    private ChargingDTO selectedCharging = new();
    private List<EmployeeTypeDTO> employeeTypes = new();
    private EmployeeTypeDTO selectedEmployeeType = new();
    private List<LevelDTO> levels = new();
    private LevelDTO selectedLevel = new();
    private List<ShiftDTO> shifts = new();
    private SectionDTO supervisedGroup = new();
    private string positionLabel = "Positions";


    bool isFirstLoad = false;

    public Task InitializeDialogAsync()
    {
        if(!isFirstLoad)
        {
            isFirstLoad = true;

            genderOptions = EnumUtilities.GetEnumOptions<Gender>();
            civilStatusOptions = EnumUtilities.GetEnumOptions<CivilStatus>();
            bloodTypeOptions = EnumUtilities.GetEnumOptions<BloodType>();
            educationalAttainmentOptions = EnumUtilities.GetEnumOptions<EducationalAttainment>();
            employmentStatusOptions = EnumUtilities.GetEnumOptions<Status>();
            credentialsOptions = EnumUtilities.GetEnumOptions<Credential>();

            positions = GlobalService.Positions.ToList() ?? new List<PositionDTO>();
            sections = GlobalService.Sections.ToList() ?? new List<SectionDTO>();
            departments = GlobalService.Departments.ToList() ?? new List<DepartmentDTO>();
            divisions = GlobalService.Divisions.ToList() ?? new List<DivisionDTO>();
            chargings = GlobalService.Chargings.ToList() ?? new List<ChargingDTO>();
            employeeTypes = GlobalService.EmployeeTypes.ToList() ?? new List<EmployeeTypeDTO>();
            levels = GlobalService.Levels.ToList() ?? new List<LevelDTO>();
            shifts = GlobalService.Shifts.ToList() ?? new List<ShiftDTO>();

            if(Content.PositionId == Guid.Empty)
                Content.PositionId = positions.FirstOrDefault()?.Id ?? Guid.Empty;
            selectedPosition = positions.FirstOrDefault(i => i.Id == Content.PositionId) ?? new PositionDTO();
            
            if(Content.SectionId == Guid.Empty)
                Content.SectionId = sections.FirstOrDefault(i => i.Id == Content.PositionId)?.Id ?? Guid.Empty;
            if(Content.DepartmentId == Guid.Empty)
                Content.DepartmentId = departments.FirstOrDefault(i => i.Id == Content.SectionId)?.Id ?? Guid.Empty;
            if(Content.DivisionId == Guid.Empty)
                Content.DivisionId = divisions.FirstOrDefault(i => i.Id == Content.DepartmentId)?.Id ?? Guid.Empty;
            
            if(Content.ChargingId == Guid.Empty)
                Content.ChargingId = chargings.FirstOrDefault()?.Id ?? Guid.Empty;
            selectedCharging = chargings.FirstOrDefault(i => i.Id == Content.ChargingId) ?? new ChargingDTO();

            if(Content.TypeId == Guid.Empty)
                Content.TypeId = employeeTypes.FirstOrDefault()?.Id ?? Guid.Empty;
            selectedEmployeeType = employeeTypes.FirstOrDefault(i => i.Id == Content.TypeId) ?? new EmployeeTypeDTO();

            if(Content.LevelId == Guid.Empty)
                Content.LevelId = levels.FirstOrDefault()?.Id ?? Guid.Empty;
            selectedLevel = levels.FirstOrDefault(i => i.Id == Content.LevelId) ?? new LevelDTO();

            selectedGender = genderOptions.FirstOrDefault(i => (Gender)(i.Value ?? Gender.NotSet)  == Content.Gender) ?? new EnumOption(null, null);
            selectedCivilStatus = civilStatusOptions.FirstOrDefault(i => (CivilStatus)(i.Value ?? CivilStatus.NotSet) == Content.CivilStatus) ?? new EnumOption(null, null);
            selectedBloodType = bloodTypeOptions.FirstOrDefault(i => (BloodType)(i.Value ?? BloodType.NotSet) == Content.BloodType) ?? new EnumOption(null, null);
            selectedEducationalAttainment = educationalAttainmentOptions.FirstOrDefault(i => (EducationalAttainment)(i.Value ?? EducationalAttainment.NotSet) == Content.EducationalAttainment) ?? new EnumOption(null, null);
            selectedEmploymentStatus = employmentStatusOptions.FirstOrDefault(i => (Status)(i.Value ?? Status.NotSet) == Content.Status) ?? new EnumOption(null, null);
            selectedCredential = credentialsOptions.FirstOrDefault(i => (Credential)(i.Value ?? Credential.None) == Content.Credential) ?? new EnumOption(null, null);

            IsDisableSupervisedGroup();
        }
        return Task.CompletedTask;
    }

    public void HandleGenderSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        if(string.IsNullOrWhiteSpace(stringValue) || stringValue == "-1" || stringValue == "Not Set")
            Content.Gender = Gender.NotSet;
        else
            Content.Gender = Enum.Parse<Gender>(stringValue);
    }

    public void HandleCivilStatusSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        if(string.IsNullOrWhiteSpace(stringValue) || stringValue == "-1" || stringValue == "Not Set")
            Content.CivilStatus = CivilStatus.NotSet;
        else
            Content.CivilStatus = Enum.Parse<CivilStatus>(stringValue);
    }

    public void HandleBloodTypeSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString();

        if(string.IsNullOrWhiteSpace(stringValue) || stringValue == "-1")
            Content.BloodType = BloodType.NotSet;
        else{
            switch(stringValue)
            {
                case "A+":
                    Content.BloodType = BloodType.APositive;
                    break;
                case "A-":
                    Content.BloodType = BloodType.ANegative;
                    break;
                case "B+":
                    Content.BloodType = BloodType.BPositive;
                    break;
                case "B-":
                    Content.BloodType = BloodType.BNegative;
                    break;
                case "AB+":
                    Content.BloodType = BloodType.ABPositive;
                    break;
                case "AB-":
                    Content.BloodType = BloodType.ABNegative;
                    break;
                case "O+":
                    Content.BloodType = BloodType.OPositive;
                    break;
                case "O-":
                    Content.BloodType = BloodType.ONegative;
                    break;
                case "Not Set":
                default:
                    Content.BloodType = BloodType.NotSet;
                    break;                    
            }
        }
    }

    public void HandleEducationalAttainmentSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim().Replace(" ", "").Replace("/", "_");

        if(string.IsNullOrWhiteSpace(stringValue) || stringValue == "-1" || stringValue == "Not Set")
            Content.EducationalAttainment = EducationalAttainment.NotSet;
        else
            Content.EducationalAttainment = Enum.Parse<EducationalAttainment>(stringValue);
    }

    public void HandleEmploymentStatusSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim().Replace(" ", "").Replace("/", "_");

        if(string.IsNullOrWhiteSpace(stringValue) || stringValue == "-1" || stringValue == "Not Set")
            Content.Status = Status.NotSet;
        else
            Content.Status = Enum.Parse<Status>(stringValue);
    }

    public void HandleCredentialsSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        if(string.IsNullOrWhiteSpace(stringValue) || stringValue == "-1" || stringValue == "Not Set")
            Content.Credential = Credential.None;
        else
            Content.Credential = Enum.Parse<Credential>(stringValue);
    }

    public void HandleEmployeeTypesSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        var employeeType = employeeTypes.FirstOrDefault(x => x.Name.Equals(stringValue, StringComparison.InvariantCultureIgnoreCase));
        if(employeeType != null)
            Content.TypeId = employeeType.Id;

        bool isRegular = false;
        if(employeeType != null && employeeType.Name.Equals("Regular", StringComparison.InvariantCultureIgnoreCase))
            isRegular = true;

        if(Content.BasicPay != null) {
            var (dailyRate, hourlyRate) = GlobalService.GetRatesByEmployeeType(Content.BasicPay.HasValue ? Content.BasicPay.Value : 0, isRegular);
            Content.DailyRate = dailyRate;
            Content.HourlyRate = hourlyRate;
        }
    }

    public void HandleLevelsSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        var level = levels.FirstOrDefault(x => x.Name.Equals(stringValue, StringComparison.InvariantCultureIgnoreCase));
        if(level != null)
            Content.LevelId = level.Id;
    }

    public void HandlePositionsSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        var position = positions.FirstOrDefault(x => x.Name.Equals(stringValue, StringComparison.InvariantCultureIgnoreCase));
        if(position != null) {
            Content.PositionId = position.Id;

            var pos = positions.FirstOrDefault(i => i.Id == position.Id); 
            if(pos == null) return;
            var sec = sections.FirstOrDefault(i => i.Id == pos.SectionId);
            if(sec == null) return;
            var dept = departments.FirstOrDefault(i => i.Id == sec.DepartmentId);
            if(dept == null) return;
            var div = divisions.FirstOrDefault(i => i.Id == dept.DivisionId);
            if(div == null) return;

            positionLabel = $"Positions > {sec.Name} > {dept.Name} > {div.Name}";
            chargings = GlobalService.Chargings.Where(i => i.DepartmentId == dept.Id).ToList();
        }
    }

    public void HandleChargingsSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        var charging = chargings.FirstOrDefault(x => x.Name.Equals(stringValue, StringComparison.InvariantCultureIgnoreCase)); 
        if(charging != null)
            Content.ChargingId = charging.Id;
    }

    public void HandleSupervisedGroupSelected(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();

        var section = sections.FirstOrDefault(x => x.Name.Equals(stringValue, StringComparison.InvariantCultureIgnoreCase)); 
        if(section != null)
            Content.SupervisedGroup = section.Id;
    }

    public void HandleBasicPayUpdated(ChangeEventArgs changeEventArgs)
    {
        var stringValue = changeEventArgs.Value?.ToString()!.Trim();
        // convert stringValue to decimal
        if(decimal.TryParse(stringValue, out var basicPay))
        {
            bool isRegular = false;
            if(selectedEmployeeType != null && selectedEmployeeType.Name.Equals("Regular", StringComparison.InvariantCultureIgnoreCase))
                isRegular = true;

            var (dailyRate, hourlyRate) = GlobalService.GetRatesByEmployeeType(basicPay, isRegular);
            Content.BasicPay = basicPay;
            Content.DailyRate = dailyRate;
            Content.HourlyRate = hourlyRate;
        }
    }
    

    public bool IsDisableSupervisedGroup(){

        return Content.IsGlobalSupervisor || Content.Credential < Credential.Manager;
    }
}