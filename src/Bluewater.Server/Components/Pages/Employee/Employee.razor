@page  "/employee"
@rendermode InteractiveServer
@using Bluewater.UseCases.Employees
@using Bluewater.UseCases.Employees.Create
@using Bluewater.UseCases.Employees.Delete
@using Bluewater.UseCases.Employees.List
@using Bluewater.UseCases.Pays.Create
@using Bluewater.UseCases.Users.Create
@using MediatR
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Bluewater.Core.EmployeeAggregate.Enum;
@using Bluewater.Core.UserAggregate.Enum;

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IDialogService DialogService

<FluentDialogProvider/>

<PageTitle>Employee list</PageTitle>

<h3>Employees</h3>
<FluentButton Appearance="Appearance.Accent" Icon="@(new Icons.Regular.Size16.Add())" OnClick="@(async() => await CreateNewEmployeeAsync())">Create new employee</FluentButton>

<FluentDataGrid Items="@Employees">
    <PropertyColumn Title="Names" Property="@(p => $"{p.LastName}, {p.FirstName}")" />
    <PropertyColumn Title="Middle Name" Property="@(p => p.MiddleName)" />
    <PropertyColumn Title="Birth Date" Property="@(p => p.DateOfBirth)" />
    <PropertyColumn Title="Gender" Property="@(p => p.Gender)" />
    <PropertyColumn Title="Civil Status" Property="@(p => p.CivilStatus)" />
    <PropertyColumn Title="Status" Property="@(p => p.Status)" />
    <PropertyColumn Title="Type" Property="@(p => p.Type)" />
    <PropertyColumn Title="Level" Property="@(p => p.Level)" />
    <PropertyColumn Title="Position" Property="@(p => p.Position)" />
    <PropertyColumn Title="Section" Property="@(p => p.Section)" />
    <PropertyColumn Title="Department" Property="@(p => p.Department)" />
    <PropertyColumn Title="Division" Property="@(p => p.Division)" />
    <PropertyColumn Title="Charging" Property="@((p) => p.Charging)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteEmployee(context))"/>
    </TemplateColumn>    
</FluentDataGrid>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code{
    private bool isBusy = false;
    public IQueryable<EmployeeDTO> Employees { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try 
        {
            isBusy = true;
            if (firstRender)
            {
                await LoadEmployeesAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            await base.OnAfterRenderAsync(firstRender);
            isBusy = false;
        }
    }

    async Task LoadEmployeesAsync()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListEmployeeQuery(null, null));
                if (result.IsSuccess)
                    Employees = result.Value.AsQueryable();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    async Task DeleteEmployee(EmployeeDTO employee)
    {
        try
        {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteEmployeeCommand(employee.Id));
                if (result.IsSuccess)
                    await LoadEmployeesAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task CreateNewEmployeeAsync()
    {
            EmployeeFormDTO employee = new EmployeeFormDTO(
                null,null,null,null,Gender.NotSet,CivilStatus.NotSet,BloodType.NotSet,Status.NotSet,0,0,null,null,
                null,null,null,null,null,null,null,null,null,null,null,null,
                EducationalAttainment.NotSet,null,null,
                null,null,null,null,null,null,null,null,null,false,
                null,null,null,null,null,
                null,null,Credential.None,null,
                Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty
            );

        IDialogReference _dialog = await DialogService.ShowPanelAsync<EmployeeForm>(employee, new DialogParameters<EmployeeFormDTO>
        {
            Title = "Create new employee",
            Alignment = HorizontalAlignment.Right,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = "Create",
            SecondaryAction = "Cancel",
            Width = "650px",
        });

        DialogResult result = await _dialog.Result;
        await HandlePanelAsync(result);
    }

    async Task HandlePanelAsync(DialogResult result)
    {
        try
        {
            isBusy = true;
            if (result.Cancelled) return;
            if (result.Data is not null)
            {
                var e = result.Data as EmployeeFormDTO;
                Console.WriteLine(e!.ToString());

                if(e != null){
                    // create user
                    Guid userId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateUserCommand(e.Username ?? string.Empty, e.Password ?? string.Empty, e.Credential, e.SupervisedGroup));
                        if (ret.IsSuccess)
                            userId = ret.Value;
                    }

                    // create pay
                    Guid payId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreatePayCommand(e.BasicPay ?? 0, e.DailyRate ?? 0, e.HourlyRate ?? 0, e.HDMF_Con ?? 200, e.HDMF_Er ?? 200));
                        if (ret.IsSuccess)
                            payId = ret.Value;

                    }

                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateEmployeeCommand(
                            e.FirstName ?? string.Empty, e.LastName ?? string.Empty, e.MiddleName, e.DateOfBirth, e.Gender, e.CivilStatus, e.BloodType, e.Status, e.Height, e.Weight, e.ImageUrl, e.Remarks,
                            new ContactInfo(e.Email, e.TelNumber, e.MobileNumber, e.Address, e.ProvincialAddress, e.MothersMaidenName, e.FathersName, e.EmergencyContact, e.RelationshipContact, e.AddressContact, e.TelNoContact, e.MobileNoContact),
                            new EducationInfo(e.EducationalAttainment, e.CourseGraduated, e.UniversityGraduated),
                            new EmploymentInfo(e.DateHired, e.DateRegularized, e.DateResigned, e.DateTerminated, e.TinNo, e.SssNo, e.HdmfNo, e.PhicNo, e.BankAccount, e.HasServiceCharge),
                            userId, e.PositionId, payId, e.TypeId, e.LevelId, e.ChargingId));
                        if (ret.IsSuccess)
                            await LoadEmployeesAsync();
                    }
                }
            }

        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }


    }    
}