@page  "/employee"
@rendermode InteractiveServer
@using Bluewater.Server.Components.Pages.Employee
@using Bluewater.UseCases.Employees
@using Bluewater.UseCases.Employees.Create
@using Bluewater.UseCases.Employees.Delete
@using Bluewater.UseCases.Employees.List
@using Bluewater.UseCases.Pays.Create
@using Bluewater.UseCases.Schedules.Create
@using Bluewater.UseCases.Schedules.Get
@using Bluewater.UseCases.Shifts
@using Bluewater.UseCases.Users.Create
@using Bluewater.UseCases.Users.Update
@using MediatR
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Bluewater.Core.EmployeeAggregate.Enum;
@using Bluewater.Core.UserAggregate.Enum;

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IDialogService DialogService

@using Bluewater.Server.Global;
@inject IGlobalService GlobalService

<FluentDialogProvider/>

<PageTitle>Employee list</PageTitle>

<h3>Employees</h3>
<FluentButton Appearance="Appearance.Accent" Icon="@(new Icons.Regular.Size16.Add())" OnClick="@(async() => await CreateNewEmployeeAsync())">Create new employee</FluentButton>

<FluentDataGrid Items="@Employees">
    <PropertyColumn Title="Names" Property="@(p => $"{p.LastName}, {p.FirstName}")" />
    <PropertyColumn Title="Middle Name" Property="@(p => p.MiddleName)" />
    <PropertyColumn Title="Birth Date" Property="@(p => p.DateOfBirth)" />
    <PropertyColumn Title="Gender" Property="@(p => p.Gender)" />
    <PropertyColumn Title="Civil Status" Property="@(p => p.CivilStatus)" />
    <PropertyColumn Title="Status" Property="@(p => p.Status)" />
    <PropertyColumn Title="Type" Property="@(p => p.Type)" />
    <PropertyColumn Title="Level" Property="@(p => p.Level)" />
    <PropertyColumn Title="Position" Property="@(p => p.Position)" />
    <PropertyColumn Title="Section" Property="@(p => p.Section)" />
    <PropertyColumn Title="Department" Property="@(p => p.Department)" />
    <PropertyColumn Title="Division" Property="@(p => p.Division)" />
    <PropertyColumn Title="Charging" Property="@((p) => p.Charging)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(async() => await EditEmployeeAsync(context))"/>
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteEmployeeAsync(context))"/>
    </TemplateColumn>    
</FluentDataGrid>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code{
    private bool isBusy = false;
    public IQueryable<EmployeeDTO> Employees { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try{
            isBusy = true;
            await LoadEmployeesAsync();
        }
        catch (Exception)
        {
            throw;
        }
        finally{
            isBusy = false;
        }
    }

    async Task LoadEmployeesAsync()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListEmployeeQuery(null, null));
                if (result.IsSuccess)
                    Employees = result.Value.AsQueryable();
            }
        }
        catch (Exception)
        {
        }
    }

    async Task DeleteEmployeeAsync(EmployeeDTO employee)
    {
        try
        {
            isBusy = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteEmployeeCommand(employee.Id));
                if (result.IsSuccess)
                    await LoadEmployeesAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task EditEmployeeAsync(EmployeeDTO employee)
    {
        var positionId = GlobalService.Positions.FirstOrDefault(x => x.Name == employee.Position)?.Id ?? Guid.Empty;
        var sectionId = GlobalService.Sections.FirstOrDefault(x => x.Name == employee.Section)?.Id ?? Guid.Empty;
        var departmentId = GlobalService.Departments.FirstOrDefault(x => x.Name == employee.Department)?.Id ?? Guid.Empty;
        var divisionId = GlobalService.Divisions.FirstOrDefault(x => x.Name == employee.Division)?.Id ?? Guid.Empty;
        var chargingId = GlobalService.Chargings.FirstOrDefault(x => x.Name == employee.Charging)?.Id ?? Guid.Empty;
        var typeId = GlobalService.EmployeeTypes.FirstOrDefault(x => x.Name == employee.Type)?.Id ?? Guid.Empty;
        var levelId = GlobalService.Levels.FirstOrDefault(x => x.Name == employee.Level)?.Id ?? Guid.Empty;
        Credential credential = employee.User!.Credential;

        // get shift default schedule
        List<ShiftDTO> defaultShifts = new();
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var ret = await mediator.Send(new GetDefaultScheduleQuery(employee.Id));
            if (ret.IsSuccess)
                defaultShifts = ret.Value.ToList();
        }

        EmployeeFormDTO employeeForm = new EmployeeFormDTO(
            employee.FirstName, employee.LastName, employee.MiddleName, employee.DateOfBirth, employee.Gender, employee.CivilStatus, employee.BloodType, employee.Status, employee.Height, employee.Weight, employee.ImageUrl, employee.Remarks,
            employee.ContactInfo!.Email, employee.ContactInfo!.TelNumber, employee.ContactInfo!.MobileNumber, employee.ContactInfo!.Address, employee.ContactInfo!.ProvincialAddress, employee.ContactInfo!.MothersMaidenName, employee.ContactInfo!.FathersName, employee.ContactInfo!.EmergencyContact, employee.ContactInfo!.RelationshipContact, employee.ContactInfo!.AddressContact, employee.ContactInfo!.TelNoContact, employee.ContactInfo!.MobileNoContact,
            employee.EducationInfo!.EducationalAttainment, employee.EducationInfo!.CourseGraduated, employee.EducationInfo!.UniversityGraduated,
            employee.EmploymentInfo!.DateHired, employee.EmploymentInfo!.DateRegularized, employee.EmploymentInfo!.DateResigned, employee.EmploymentInfo!.DateTerminated, employee.EmploymentInfo!.TinNo, employee.EmploymentInfo!.SssNo, employee.EmploymentInfo!.PagibigNo, employee.EmploymentInfo!.PhilHealthNo, employee.EmploymentInfo!.BankAccount, employee.EmploymentInfo!.HasServiceCharge,
            employee.Pay!.BasicPay, employee.Pay!.DailyRate, employee.Pay!.HourlyRate, employee.Pay!.HDMF_Con, employee.Pay!.HDMF_Er,
            employee.User!.Username, employee.User!.PasswordHash, credential, employee.User!.SupervisedGroup,
            positionId, sectionId, departmentId, divisionId, typeId, levelId, chargingId,
            defaultShifts[0].Id == Guid.Empty ? null : defaultShifts[0], 
            defaultShifts[1].Id == Guid.Empty ? null : defaultShifts[1],
            defaultShifts[2].Id == Guid.Empty ? null : defaultShifts[2],
            defaultShifts[3].Id == Guid.Empty ? null : defaultShifts[3],
            defaultShifts[4].Id == Guid.Empty ? null : defaultShifts[4],
            defaultShifts[5].Id == Guid.Empty ? null : defaultShifts[5],
            defaultShifts[6].Id == Guid.Empty ? null : defaultShifts[6]
        );
        
        IDialogReference _dialog = await DialogService.ShowPanelAsync<EmployeeForm>(employeeForm, new DialogParameters<EmployeeFormDTO>
        {
            Title = "Update employee",
            Alignment = HorizontalAlignment.Right,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = "Update",
            SecondaryAction = "Cancel",
            Width = "650px",
        });

        DialogResult result = await _dialog.Result;
        await HandleEditPanelAsync(result);
    }

    async Task HandleEditPanelAsync(DialogResult result)
    {
        try{
            isBusy = true;
            await Task.Delay(100);

            if (result.Cancelled) return;
            if (result.Data is not null)
            {
                var e = result.Data as EmployeeFormDTO;

                if(e != null){
                    // update user
                }
            }
        }
        catch(Exception){
            throw;
        }
        finally{
            isBusy = false;
        }

    }

    async Task CreateNewEmployeeAsync()
    {
        EmployeeFormDTO employee = new EmployeeFormDTO(
            null,null,null,null,Gender.NotSet,CivilStatus.NotSet,BloodType.NotSet,Status.NotSet,0,0,null,null,
            null,null,null,null,null,null,null,null,null,null,null,null,
            EducationalAttainment.NotSet,null,null,
            null,null,null,null,null,null,null,null,null,false,
            null,null,null,null,null,
            null,null,Credential.None,null,
            Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty
        );

        IDialogReference _dialog = await DialogService.ShowPanelAsync<EmployeeForm>(employee, new DialogParameters<EmployeeFormDTO>
        {
            Title = "Create new employee",
            Alignment = HorizontalAlignment.Right,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = "Create",
            SecondaryAction = "Cancel",
            Width = "650px",
        });

        DialogResult result = await _dialog.Result;
        await HandleCreatePanelAsync(result);
    }

    async Task HandleCreatePanelAsync(DialogResult result)
    {
        try
        {
            isBusy = true;
            if (result.Cancelled) return;
            if (result.Data is not null)
            {
                var e = result.Data as EmployeeFormDTO;

                Console.WriteLine($"==================== 1 {e!.SundayShift} =====================");
                Console.WriteLine($"==================== 2 {e!.MondayShift} =====================");
                Console.WriteLine($"==================== 3 {e!.TuesdayShift} =====================");
                Console.WriteLine($"==================== 4 {e!.WednesdayShift} =====================");
                Console.WriteLine($"==================== 5 {e!.ThursdayShift} =====================");
                Console.WriteLine($"==================== 6 {e!.FridayShift} =====================");
                Console.WriteLine($"==================== 7 {e!.SaturdayShift} =====================");

                if(e != null){
                    // create user
                    Guid userId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateUserCommand(e.Username ?? string.Empty, e.Password ?? string.Empty, e.Credential, e.SupervisedGroup));
                        if (ret.IsSuccess)
                            userId = ret.Value;
                    }

                    // create pay
                    Guid payId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreatePayCommand(e.BasicPay ?? 0, e.DailyRate ?? 0, e.HourlyRate ?? 0, e.HDMF_Con ?? 200, e.HDMF_Er ?? 200));
                        if (ret.IsSuccess)
                            payId = ret.Value;

                    }

                    var empId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateEmployeeCommand(
                            e.FirstName ?? string.Empty, e.LastName ?? string.Empty, e.MiddleName, e.DateOfBirth, e.Gender, e.CivilStatus, e.BloodType, e.Status, e.Height, e.Weight, e.ImageUrl, e.Remarks,
                            new ContactInfo(e.Email, e.TelNumber, e.MobileNumber, e.Address, e.ProvincialAddress, e.MothersMaidenName, e.FathersName, e.EmergencyContact, e.RelationshipContact, e.AddressContact, e.TelNoContact, e.MobileNoContact),
                            new EducationInfo(e.EducationalAttainment, e.CourseGraduated, e.UniversityGraduated),
                            new EmploymentInfo(e.DateHired, e.DateRegularized, e.DateResigned, e.DateTerminated, e.TinNo, e.SssNo, e.HdmfNo, e.PhicNo, e.BankAccount, e.HasServiceCharge),
                            userId, e.PositionId, payId, e.TypeId, e.LevelId, e.ChargingId));
                        if (ret.IsSuccess){
                            empId = ret.Value;
                            await LoadEmployeesAsync();
                        }
                    }

                    // create default schedules
                    await CreateSchedules(empId, e.DefaultShifts);
                }
            }

        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }    

    private async Task CreateSchedules(Guid empId, IEnumerable<ShiftDTO> defaultShifts)
    {
        DateTime currentDate = DateTime.Now;
        DateTime startOfWeek = currentDate.AddDays(-(int)currentDate.DayOfWeek);

        List<DateOnly> weekDates = new();
        // Loop through the days of the week, starting from Sunday
        foreach (DayOfWeek day in Enum.GetValues<DayOfWeek>())
        {
            // Calculate the date for this day
            DateTime date = startOfWeek.AddDays((int)day);
            weekDates.Add(DateOnly.FromDateTime(date));
        }

        int index = 0;
        foreach (var shift in defaultShifts)
        {
            if(shift != null && shift.Id != Guid.Empty && empId != Guid.Empty)
            {
                using (var scope = ServiceScopeFactory.CreateScope())
                {   
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    await mediator.Send(new CreateScheduleCommand(empId, shift.Id, weekDates[index], IsDefault: true));
                }
            }
            index++;
        }
    }
}