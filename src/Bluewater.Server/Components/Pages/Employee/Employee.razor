@page  "/employee"
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@attribute [Authorize(Roles = "SuperAdmin")]
@using Bluewater.Server.Components.Pages.Employee
@using Bluewater.Server.Helpers
@using Bluewater.UseCases.Employees
@using Bluewater.UseCases.Employees.Create
@using Bluewater.UseCases.Employees.Delete
@using Bluewater.UseCases.Employees.List
@using Bluewater.UseCases.Employees.Update
@using Bluewater.UseCases.Pays.Create
@using Bluewater.UseCases.Pays.Update
@using Bluewater.UseCases.Schedules
@using Bluewater.UseCases.Schedules.Create
@using Bluewater.UseCases.Schedules.Get
@using Bluewater.UseCases.Schedules.Update
@using Bluewater.UseCases.Shifts
@using Bluewater.UseCases.Users.Create
@using Bluewater.UseCases.Users.Update
@using MediatR
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Bluewater.Core.EmployeeAggregate.Enum;
@using Bluewater.Core.UserAggregate.Enum;

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

@using Bluewater.Server.Global;
@inject IGlobalService GlobalService

<FluentDialogProvider/>

<PageTitle>Employee list</PageTitle>

<h3>Employees</h3>

<FluentInputFile @ref="@empFileUploader" DragDropZoneVisible="false" Mode="InputFileMode.SaveToTemporaryFolder" Multiple="false" 
    AnchorId="EmployeeImportButton" MaximumFileSize="@(100 * 1024 * 1024)" Accept=".csv"
    OnProgressChange="@(e =>
        {
            progressPercent = e.ProgressPercent; 
            progressTitle = e.ProgressTitle;
        })"
    OnCompleted="@ImportEmployeeAsync" style="display: none;"/>

<div style="display: flex; justify-content: space-between; align-items: center;">
    <FluentButton Appearance="Appearance.Accent" Icon="@(new Icons.Regular.Size16.Add())" OnClick="@(async() => await CreateNewEmployeeAsync())">Create new employee</FluentButton>
    <div>
        <FluentButton Id="EmployeeImportButton" IconStart="@(new Icons.Regular.Size16.ArrowImport())" Appearance="Appearance.Outline" style="margin-right: 8px;" >Import</FluentButton>
        <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowExport())" Appearance="Appearance.Outline" OnClick="@(async() => await ExportEmployeeAsync())">Export</FluentButton>
    </div>
</div>

<FluentSpacer/>

@* <FluentDataGrid ItemsProvider="GetDataAsync" Pagination="@pagination" TGridItem="EmployeeDTO" *@
<FluentDataGrid Items="@FilteredItems" Pagination="@pagination" TGridItem="EmployeeDTO"
    GridTemplateColumns="0.6fr 1fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.5fr"
    Style="height: 550px;overflow:auto;">
    <PropertyColumn Title="Barcode" Property="@(p => p.User!.Username)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=barcodeFilter @oninput="HandleUsernameFilter" @bind-Value:after="HandleBarcodeClear" Placeholder="Barcode..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Title="Names" Property="@(p => $"{p.LastName}, {p.FirstName}")" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleEmployeeFilter" @bind-Value:after="HandleClear" Placeholder="Employee name..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Title="Birth Date" Property="@(p => p.DateOfBirth)" />
    <PropertyColumn Title="Status" Property="@(p => p.Status)" Sortable="true"/>
    <PropertyColumn Title="Type" Property="@(p => p.Type)" Sortable="true"/>
    <PropertyColumn Title="Level" Property="@(p => p.Level)" Sortable="true"/>
    <PropertyColumn Title="Position" Property="@(p => p.Position)" Sortable="true"/>
    <PropertyColumn Title="Section" Property="@(p => p.Section)" Sortable="true"/>
    <PropertyColumn Title="Department" Property="@(p => p.Department)" Sortable="true"/>
    <PropertyColumn Title="Division" Property="@(p => p.Division)" Sortable="true"/>
    <PropertyColumn Title="Charging" Property="@((p) => p.Charging)" Sortable="true"/>
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(async() => await EditEmployeeAsync(context))"/>
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteEmployeeAsync(context))"/>
    </TemplateColumn>    
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

<script>
    function triggerFileInput(id) {
        const inputFile = document.getElementById(id);
        if (inputFile) {
            inputFile.click();
        }
    }
</script>

@code{
    string barcodeFilter = string.Empty;
    string nameFilter = string.Empty;    
    private bool isBusy = false;
    public IQueryable<EmployeeDTO> Employees { get; set; } = default!;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool isFirstLoad = true;

    IQueryable<EmployeeDTO>? FilteredItems
    {
        get
        {
            var result = Employees;
            if (result is not null && !string.IsNullOrEmpty(nameFilter))
                result = result.Where(c => $"{c.LastName}, {c.FirstName}".Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            else if (result is not null && !string.IsNullOrEmpty(barcodeFilter))
                result = result.Where(c => c.User != null && c.User!.Username.Contains(barcodeFilter, StringComparison.CurrentCultureIgnoreCase));
            return result;
        }
    }        

    private async ValueTask<GridItemsProviderResult<EmployeeDTO>> GetDataAsync(GridItemsProviderRequest<EmployeeDTO> request){
        try{
            isBusy = true;

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

                int skip = (pagination.CurrentPageIndex) * pagination.ItemsPerPage;
                int take = pagination.ItemsPerPage;

                var result = await mediator.Send(new ListEmployeeQuery(skip,take, GlobalService.CurrentTenant));
                if (result.IsSuccess){
                    return GridItemsProviderResult.From<EmployeeDTO>(result.Value.ToList(), 200);
                }
            }
            return GridItemsProviderResult.From<EmployeeDTO>(new List<EmployeeDTO>(), 200);
        }
        finally {
            isBusy = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try{
            isBusy = true;

            if(isFirstLoad) {                                
                await LoadEmployeesAsync();
            }
            isFirstLoad = false;
        }
        catch (Exception)
        {
            throw;
        }
        finally{
            isBusy = false;
        }
    }

    int? progressPercent;
    string? progressTitle;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    FluentInputFile? empFileUploader = default!;
    async Task ImportEmployeeAsync(IEnumerable<FluentInputFileEventArgs> files) {
        try {
            isBusy = true;

            Files = files.ToArray();
            progressPercent = empFileUploader!.ProgressPercent;
            progressTitle = empFileUploader!.ProgressTitle;

            // assume only one file is uploaded
            var file = Files.FirstOrDefault();
            if(file != null) {
                var ret = await CsvUtility.ImportFromCSV<EmployeeImportDTO>(file.LocalFile!.FullName);
                if(ret.Item1 != null) {
                    foreach(var emp in ret.Item1) {


                        Guid? positionId = GlobalService.Positions.FirstOrDefault(i => i.Name.Equals(emp.Position, StringComparison.InvariantCultureIgnoreCase))?.Id;
                        Guid? chargingId = GlobalService.Chargings.FirstOrDefault(i => i.Name.Equals(emp.ChargingCode, StringComparison.InvariantCultureIgnoreCase))?.Id;

                        var type = GlobalService.EmployeeTypes.FirstOrDefault(i => i.Name.Equals(emp.EmployeeType, StringComparison.InvariantCultureIgnoreCase));
                        var level = GlobalService.Levels.FirstOrDefault(i => i.Name.Equals(emp.Rank, StringComparison.InvariantCultureIgnoreCase));

                        Guid userId = Guid.Empty;
                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var result = await mediator.Send(new CreateUserCommand(emp.EmployeeID ?? string.Empty, emp.EmployeeID ?? string.Empty, Credential.Employee, null, false));
                            if (result.IsSuccess)
                                userId = result.Value;
                        }

                        // create pay
                        Guid payId = Guid.Empty;
                        if(!string.IsNullOrEmpty(emp.EmployeeType)) {
                            using (var scope = ServiceScopeFactory.CreateScope())
                            {
                                var (dailyRate, hourlyRate) = GlobalService.GetRatesByEmployeeType(emp.MonthlyRate.HasValue ? emp.MonthlyRate.Value : 0, emp.EmployeeType.Equals("Regular", StringComparison.InvariantCultureIgnoreCase));

                                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                                var result = await mediator.Send(new CreatePayCommand(emp.MonthlyRate ?? 0, dailyRate, hourlyRate, 200 , 200));
                                if (result.IsSuccess)
                                    payId = result.Value;
                            }
                        }

                        using (var scope = ServiceScopeFactory.CreateScope())
                        {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            await mediator.Send(new CreateEmployeeCommand(
                                emp.FirstName ?? string.Empty, emp.LastName ?? string.Empty, emp.MiddleName, emp.BirthDate, 
                                Enum.TryParse<Gender>(emp.Gender, true, out var genderResult) ? genderResult : Gender.NotSet, 
                                Enum.TryParse<CivilStatus>(emp.CivilStatus, true, out var civilStatusResult) ? civilStatusResult : CivilStatus.Single, BloodType.NotSet,
                                Enum.TryParse<Status>(emp.Status, true, out var status) ? status : Status.NotSet, null, null, null, null,
                                new Bluewater.UseCases.Employees.Create.ContactInfo(
                                    Email: null,
                                    TelNumber: null,
                                    MobileNumber: emp.CellNo,
                                    Address: emp.Address,
                                    ProvincialAddress: null,
                                    MothersMaidenName: null,
                                    FathersName: null,
                                    EmergencyContact: null,
                                    RelationshipContact: null,
                                    addressContact: null,
                                    TelNoContact: null,
                                    MobileNoContact: null
                                ),
                                new Bluewater.UseCases.Employees.Create.EducationInfo(EducationalAttainment.NotSet, null, null),
                                new Bluewater.UseCases.Employees.Create.EmploymentInfo(
                                    DateHired: emp.DateHired,
                                    DateRegularized: null,
                                    DateResigned: null,
                                    DateTerminated: null,
                                    TinNo: emp.TINNo,
                                    SssNo: emp.SSSNo,
                                    HdmfNo: emp.PagIbigID,
                                    PhicNo: emp.PhilHealthID,
                                    BankAccount: emp.BankAccount,
                                    HasServiceCharge: false // Default as it is not available in the import data                                    
                                ),
                                userId, positionId, payId, type?.Id, level?.Id, chargingId,
                                emp.MealCredits ?? 1, Enum.TryParse<Tenant>(emp.Tenant, true, out var tenant) ? tenant : Tenant.Maribago));
                        }
                    }

                    await LoadEmployeesAsync();
                }
                else 
                    await DialogService.ShowErrorAsync("Something's wrong with importing the Employee list. Please contact admin", "Import Error");
            }
        }
        catch (Exception e) {
            Console.WriteLine( $"====={e.Message}=====");
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    async Task ExportEmployeeAsync() {
        try {
            var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to export Employee list?", "Yes", "No", "Export");
            var conf = await dialog.Result;
            if (conf.Cancelled) return;

            isBusy = true;

            if(FilteredItems != null && FilteredItems.Any()) {
                var exportResult = await CsvUtility.ExportToCSV<EmployeeDTO>(FilteredItems.ToList(), $"employees_export_{DateTime.Now.ToString("MMM dd hh:mm:ss tt")}.csv", new[] { "id" });
                await DialogService.ShowInfoAsync(exportResult, "Export");
            }
        }
        catch (Exception) {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    async Task LoadEmployeesAsync()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();

                int skip = (pagination.CurrentPageIndex - 1) * pagination.ItemsPerPage;
                int take = pagination.ItemsPerPage;

                var result = await mediator.Send(new ListEmployeeQuery(null,null, GlobalService.CurrentTenant));
                if (result.IsSuccess){
                    Employees = result.Value.AsQueryable();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    async Task DeleteEmployeeAsync(EmployeeDTO employee)
    {
        try
        {
            var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to delete {employee.LastName}, {employee.FirstName}?", "Yes", "No", "Delete");
            var conf = await dialog.Result;
            if (conf.Cancelled) return;

            isBusy = true;

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteEmployeeCommand(employee.Id));
                if (result.IsSuccess)
                    await LoadEmployeesAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await DialogService.ShowErrorAsync($"Unable to delete {employee.LastName}, {employee.FirstName}","");
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task EditEmployeeAsync(EmployeeDTO employee)
    {
        var positionId = GlobalService.Positions.FirstOrDefault(x => x.Name == employee.Position)?.Id ?? Guid.Empty;
        var sectionId = GlobalService.Sections.FirstOrDefault(x => x.Name == employee.Section)?.Id ?? Guid.Empty;
        var departmentId = GlobalService.Departments.FirstOrDefault(x => x.Name == employee.Department)?.Id ?? Guid.Empty;
        var divisionId = GlobalService.Divisions.FirstOrDefault(x => x.Name == employee.Division)?.Id ?? Guid.Empty;
        var chargingId = GlobalService.Chargings.FirstOrDefault(x => x.Name == employee.Charging)?.Id ?? Guid.Empty;
        var typeId = GlobalService.EmployeeTypes.FirstOrDefault(x => x.Name == employee.Type)?.Id ?? Guid.Empty;
        var levelId = GlobalService.Levels.FirstOrDefault(x => x.Name == employee.Level)?.Id ?? Guid.Empty;
        Credential credential = employee.User!.Credential;

        // get shift default schedule
        List<ScheduleDTO> defaultSchedules = new();
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var ret = await mediator.Send(new GetDefaultScheduleQuery(employee.Id));
            if (ret.IsSuccess)
                defaultSchedules = ret.Value.ToList();
        }

        EmployeeFormDTO employeeForm = new EmployeeFormDTO(
            employee.Id, employee.FirstName, employee.LastName, employee.MiddleName, employee.DateOfBirth, employee.Gender, employee.CivilStatus, employee.BloodType, employee.Status, employee.Height, employee.Weight, employee.ImageUrl, employee.Remarks,
            employee.ContactInfo!.Email, employee.ContactInfo!.TelNumber, employee.ContactInfo!.MobileNumber, employee.ContactInfo!.Address, employee.ContactInfo!.ProvincialAddress, employee.ContactInfo!.MothersMaidenName, employee.ContactInfo!.FathersName, employee.ContactInfo!.EmergencyContact, employee.ContactInfo!.RelationshipContact, employee.ContactInfo!.AddressContact, employee.ContactInfo!.TelNoContact, employee.ContactInfo!.MobileNoContact,
            employee.EducationInfo!.EducationalAttainment, employee.EducationInfo!.CourseGraduated, employee.EducationInfo!.UniversityGraduated,
            employee.EmploymentInfo!.DateHired, employee.EmploymentInfo!.DateRegularized, employee.EmploymentInfo!.DateResigned, employee.EmploymentInfo!.DateTerminated, employee.EmploymentInfo!.TinNo, employee.EmploymentInfo!.SssNo, employee.EmploymentInfo!.PagibigNo, employee.EmploymentInfo!.PhilHealthNo, employee.EmploymentInfo!.BankAccount, employee.EmploymentInfo!.HasServiceCharge,
            employee.Pay!.Id, employee.Pay!.BasicPay, employee.Pay!.DailyRate, employee.Pay!.HourlyRate, employee.Pay!.HDMF_Con, employee.Pay!.HDMF_Er,
            employee.User!.Id, employee.User!.Username, employee.User!.PasswordHash, credential, employee.User!.SupervisedGroup, employee.User!.IsGlobalSupervisor,
            positionId, sectionId, departmentId, divisionId, typeId, levelId, chargingId, employee.MealCredits, employee.Tenant,
            defaultSchedules[0].Id == Guid.Empty ? null : defaultSchedules[0], 
            defaultSchedules[1].Id == Guid.Empty ? null : defaultSchedules[1],
            defaultSchedules[2].Id == Guid.Empty ? null : defaultSchedules[2],
            defaultSchedules[3].Id == Guid.Empty ? null : defaultSchedules[3],
            defaultSchedules[4].Id == Guid.Empty ? null : defaultSchedules[4],
            defaultSchedules[5].Id == Guid.Empty ? null : defaultSchedules[5],
            defaultSchedules[6].Id == Guid.Empty ? null : defaultSchedules[6]
        );
        
        IDialogReference _dialog = await DialogService.ShowPanelAsync<EmployeeForm>(employeeForm, new DialogParameters<EmployeeFormDTO>
        {
            Title = "Update employee",
            Alignment = HorizontalAlignment.Right,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = "Update",
            SecondaryAction = "Cancel",
            Width = "50%",
        });

        DialogResult result = await _dialog.Result;
        await HandleEditPanelAsync(result);
    }

    async Task HandleEditPanelAsync(DialogResult result)
    {
        try{
            isBusy = true;

            if (result.Cancelled) return;
            if (result.Data is not null)
            {
                var e = result.Data as EmployeeFormDTO;

                if(e != null){
                    // update user
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        await mediator.Send(new UpdateUserCommand(e.UserId ?? Guid.Empty, e.Username ?? string.Empty, e.Password ?? string.Empty, e.Credential, e.SupervisedGroup, e.IsGlobalSupervisor));
                    }

                    // TODO add cola
                    // update pay
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        await mediator.Send(new UpdatePayCommand(e.PayId ?? Guid.Empty, e.BasicPay ?? 0, e.DailyRate ?? 0, e.HourlyRate ?? 0, e.HDMF_Con ?? 200, e.HDMF_Er ?? 200, cola: 0));
                    }

                    // update employee
                    var empId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new UpdateEmployeeCommand(
                            e.Id, e.FirstName ?? string.Empty, e.LastName ?? string.Empty, e.MiddleName, e.DateOfBirth, e.Gender, e.CivilStatus, e.BloodType, e.Status, e.Height, e.Weight, e.ImageUrl, e.Remarks,
                            new Bluewater.UseCases.Employees.Update.ContactInfo(e.Email, e.TelNumber, e.MobileNumber, e.Address, e.ProvincialAddress, e.MothersMaidenName, e.FathersName, e.EmergencyContact, e.RelationshipContact, e.AddressContact, e.TelNoContact, e.MobileNoContact),
                            new Bluewater.UseCases.Employees.Update.EducationInfo(e.EducationalAttainment, e.CourseGraduated, e.UniversityGraduated),
                            new Bluewater.UseCases.Employees.Update.EmploymentInfo(e.DateHired, e.DateRegularized, e.DateResigned, e.DateTerminated, e.TinNo, e.SssNo, e.HdmfNo, e.PhicNo, e.BankAccount, e.HasServiceCharge),
                            e.UserId ?? Guid.Empty, e.PositionId, e.PayId ?? Guid.Empty, e.TypeId, e.LevelId, e.ChargingId,
                            e.MealCredits, e.Tenant));
                        if (ret.IsSuccess) {
                            empId = ret.Value.Id;
                            await LoadEmployeesAsync();
                        }
                    }

                    // update schedule
                    await UpdateSchedules(empId, e.DefaultSchedules);
                }
            }
        }
        catch(Exception){
            throw;
        }
        finally{
            isBusy = false;
        }
    }

    async Task CreateNewEmployeeAsync()
    {
        EmployeeFormDTO employee = new EmployeeFormDTO(
            Guid.Empty, null,null,null,null,Gender.NotSet,CivilStatus.NotSet,BloodType.NotSet,Status.NotSet,0,0,null,null,
            null,null,null,null,null,null,null,null,null,null,null,null,
            EducationalAttainment.NotSet,null,null,
            null,null,null,null,null,null,null,null,null,false,
            null,null,null,null,null,null,
            null,null,null,Credential.None,null,isGlobalSupervisor: false,
            Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty,Guid.Empty, 0, Tenant.Maribago
        );

        IDialogReference _dialog = await DialogService.ShowPanelAsync<EmployeeForm>(employee, new DialogParameters<EmployeeFormDTO>
        {
            Title = "Create new employee",
            Alignment = HorizontalAlignment.Right,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = "Create",
            SecondaryAction = "Cancel",
            Width = "50%",
        });

        DialogResult result = await _dialog.Result;
        await HandleCreatePanelAsync(result);
    }

    async Task HandleCreatePanelAsync(DialogResult result)
    {
        try
        {
            isBusy = true;
            if (result.Cancelled) return;
            if (result.Data is not null)
            {
                var e = result.Data as EmployeeFormDTO;

                if(e != null) {
                    // create user
                    Guid userId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateUserCommand(e.Username ?? string.Empty, e.Password ?? string.Empty, e.Credential, e.SupervisedGroup, e.IsGlobalSupervisor));
                        if (ret.IsSuccess)
                            userId = ret.Value;
                    }

                    // create pay
                    Guid payId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreatePayCommand(e.BasicPay ?? 0, e.DailyRate ?? 0, e.HourlyRate ?? 0, e.HDMF_Con ?? 200, e.HDMF_Er ?? 200));
                        if (ret.IsSuccess)
                            payId = ret.Value;
                    }

                    var empId = Guid.Empty;
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var ret = await mediator.Send(new CreateEmployeeCommand(
                            e.FirstName ?? string.Empty, e.LastName ?? string.Empty, e.MiddleName, e.DateOfBirth, e.Gender, e.CivilStatus, e.BloodType, e.Status, e.Height, e.Weight, e.ImageUrl, e.Remarks,
                            new Bluewater.UseCases.Employees.Create.ContactInfo(e.Email, e.TelNumber, e.MobileNumber, e.Address, e.ProvincialAddress, e.MothersMaidenName, e.FathersName, e.EmergencyContact, e.RelationshipContact, e.AddressContact, e.TelNoContact, e.MobileNoContact),
                            new Bluewater.UseCases.Employees.Create.EducationInfo(e.EducationalAttainment, e.CourseGraduated, e.UniversityGraduated),
                            new Bluewater.UseCases.Employees.Create.EmploymentInfo(e.DateHired, e.DateRegularized, e.DateResigned, e.DateTerminated, e.TinNo, e.SssNo, e.HdmfNo, e.PhicNo, e.BankAccount, e.HasServiceCharge),
                            userId, e.PositionId, payId, e.TypeId, e.LevelId, e.ChargingId, e.MealCredits, e.Tenant));
                        if (ret.IsSuccess){
                            empId = ret.Value;
                            await LoadEmployeesAsync();
                        }
                    }

                    // create default schedules
                    await CreateSchedules(empId, e.DefaultShifts);
                }
            }

        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }    

    // create default schedules for the employee
    private async Task CreateSchedules(Guid empId, IEnumerable<ShiftDTO> defaultShifts)
    {
        DateTime currentDate = DateTime.Now;
        DateTime startOfWeek = currentDate.AddDays(-(int)currentDate.DayOfWeek);

        List<DateOnly> weekDates = new();

        foreach (DayOfWeek day in Enum.GetValues<DayOfWeek>())
        {
            DateTime date = startOfWeek.AddDays((int)day);
            weekDates.Add(DateOnly.FromDateTime(date));
        }

        int index = 0;
        foreach (var shift in defaultShifts)
        {
            if(shift != null && shift.Id != Guid.Empty && empId != Guid.Empty)
            {
                using (var scope = ServiceScopeFactory.CreateScope())
                {   
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    await mediator.Send(new CreateScheduleCommand(empId, shift.Id, weekDates[index], IsDefault: true));
                }
            }
            index++;
        }
    }

    // update default schedules for the employee
    private async Task UpdateSchedules(Guid empId, IEnumerable<ScheduleDTO> defaultSchedules)
    {
        DateTime currentDate = DateTime.Now;
        DateTime startOfWeek = currentDate.AddDays(-(int)currentDate.DayOfWeek);

        List<DateOnly> weekDates = new();
        // Loop through the days of the week, starting from Sunday
        foreach (DayOfWeek day in Enum.GetValues<DayOfWeek>())
        {
            // Calculate the date for this day
            DateTime date = startOfWeek.AddDays((int)day);
            weekDates.Add(DateOnly.FromDateTime(date));
        }

        int index = 0;
        foreach (var schedule in defaultSchedules)
        {
            if(schedule != null && schedule.Id != Guid.Empty && empId != Guid.Empty)
            {
                using (var scope = ServiceScopeFactory.CreateScope())
                {   
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    await mediator.Send(new UpdateScheduleCommand(schedule.Id, empId, schedule.Shift!.Id, weekDates[index], IsDefault: true));
                }
            }
            index++;
        }
    }

    private void HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
            nameFilter = value;
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }

    private void HandleUsernameFilter(ChangeEventArgs args) {
        if(args.Value is string value)
            barcodeFilter = value;
    }

    private void HandleBarcodeClear() {
        if (string.IsNullOrWhiteSpace(barcodeFilter))
            barcodeFilter = string.Empty;
    }

}