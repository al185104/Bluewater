@page "/attendance"
@rendermode InteractiveServer

@attribute [Authorize]
@using Bluewater.Server.Helpers
@using Bluewater.UseCases.Attendances
@using Bluewater.UseCases.Attendances.Create
@using Bluewater.UseCases.Attendances.List
@using Bluewater.UseCases.Chargings
@using Bluewater.UseCases.Timesheets
@using Bluewater.UseCases.Timesheets.Create
@using Bluewater.UseCases.Timesheets.List
@using MediatR

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@using Bluewater.Server.Global
@inject IGlobalService GlobalService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<FluentDialogProvider/>
<FluentTooltipProvider />

<PageTitle>Attendance</PageTitle>

<h3>Attendance</h3>

<FluentInputFile @ref="@attendanceFileUploader" DragDropZoneVisible="false" Mode="InputFileMode.SaveToTemporaryFolder" Multiple="false" 
    AnchorId="AttendanceImportButton" MaximumFileSize="@(100 * 1024 * 1024)" Accept=".csv"
    OnProgressChange="@(e =>
        {
            progressPercent = e.ProgressPercent; 
            progressTitle = e.ProgressTitle;
        })"
    OnCompleted="@ImportAttendanceAsync" />

<div style="display: flex; justify-content: space-between; align-items: center;">
    <FluentStack HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">
        <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronLeft())" Appearance="Appearance.Accent" OnClick="@(async() => await ChangePayrollPeriod(-1))" />
        <h5 style="margin: 0; vertical-align: middle;">from @startDate.ToString("MMM-dd") to @endDate.ToString("MMM-dd")</h5>
        <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronRight())" Appearance="Appearance.Accent" OnClick="@(async() => await ChangePayrollPeriod(1))" />
    </FluentStack>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
        <div>
            <FluentSelect TOption="ChargingDTO"
                Label="Select a charging"
                Items="@Chargings"
                Id="charging-listbox"
                Placeholder="Make a selection..."
                OptionValue="@(p => p.Id.ToString())"
                OptionText="@(p => p.Name)"
                @bind-SelectedOption="@selectCharging" />
        </div>
        <FluentButton IconStart="@(new Icons.Regular.Size16.Calculator())" Appearance="Appearance.Outline" OnClick="@(async() => await LoadAttendanceAsync(searchDate))" Style="margin-top: 20px;">Calculate</FluentButton>
        <FluentButton Id="AttendanceImportButton" IconStart="@(new Icons.Regular.Size16.ArrowImport())" Appearance="Appearance.Outline" style="margin-right: 8px; margin-top: 20px">Import</FluentButton>
    </FluentStack>
</div>

<FluentDataGrid Items="@FilteredItems" Pagination="@pagination"
    Style="height: 550px;overflow:auto;"
    GridTemplateColumns="0.6fr 1fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.5fr">
    <PropertyColumn Title="Barcode" Property="@(p => p.Barcode)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=barcodeFilter @oninput="HandleUsernameFilter" @bind-Value:after="HandleBarcodeClear" Placeholder="Barcode..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>    
    <PropertyColumn Title="Employee" Property="@(p => p.Name)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleEmployeeFilter" @bind-Value:after="HandleClear" Placeholder="Employee name..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Title="Department" Property="@(p => p.Department)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Section" Property="@(p => p.Section)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Total Work" Property="@(p => p.TotalWorkHrs)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Total Absences" Property="@(p => p.TotalAbsences)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Total Late" Property="@(p => p.TotalLateHrs)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Total Undertime" Property="@(p => p.TotalUnderHrs)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Total Overbreak" Property="@(p => p.TotalOverbreakHrs)" Sortable="true" Align="Align.Center"/>
    <PropertyColumn Title="Total Leaves" Property="@(p => p.TotalLeaves)" Sortable="true" Align="Align.Center"/>
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="view item" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(async() => await ViewAttendanceAsync(context))"/>
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code {
    private IQueryable<ChargingDTO> Chargings { get; set; } = default!;
    private ChargingDTO? selectCharging = default!;

    private bool isBusy = false;
    private DateOnly searchDate = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly startDate, endDate;
    string barcodeFilter = string.Empty;
    string nameFilter = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<AllAttendancesDTO> EmployeeAttendance = default!;    
    IQueryable<AllAttendancesDTO>? FilteredItems
    {
        get
        {
            var result = EmployeeAttendance;
            if (result is not null && !string.IsNullOrEmpty(nameFilter))
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            else if (result is not null && !string.IsNullOrEmpty(barcodeFilter))
                result = result.Where(c => c.Barcode != null && c.Barcode.Contains(barcodeFilter, StringComparison.CurrentCultureIgnoreCase));                
            return result;
        }
    }    

    int? progressPercent;
    string? progressTitle;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    FluentInputFile? attendanceFileUploader = default!;

    private bool _isInitialized;

    protected override void OnInitialized()
    {
        if (!_isInitialized) {
            //await LoadAttendanceAsync(searchDate);
            var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfPayslip(searchDate);
            startDate = _startDate;
            endDate = _endDate;
            Chargings = GlobalService.Chargings.ToList().AsQueryable();
            _isInitialized = true;
        }
    }

    private async Task LoadAttendanceAsync(DateOnly searchDate)
    {
        try {

            var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfPayslip(searchDate);
            startDate = _startDate;
            endDate = _endDate;

            if (selectCharging == null || string.IsNullOrEmpty(selectCharging?.Name)) return;
            
            isBusy = true;
            await Task.Delay(100);

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListAllAttendancesQuery(null, null, selectCharging.Name, _startDate, _endDate));
                if (result.IsSuccess)
                    EmployeeAttendance = result.Value.AsQueryable();
            }            
        }
        catch (Exception)
        {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    private void HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
            nameFilter = value;
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }

    private async Task ViewAttendanceAsync(AllAttendancesDTO context)
    {
        await Task.Delay(10);
        NavigationManager.NavigateTo($"/attendance/details/{context.EmployeeId}/{searchDate.ToString("yyyy-MM-dd")}");
    }

    async Task ImportAttendanceAsync(IEnumerable<FluentInputFileEventArgs> files) {
        try {
            var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to import this Attendance file?", "Yes", "No", "Import");
            var conf = await dialog.Result;
            if (conf.Cancelled) return;

            isBusy = true;

            Files = files.ToArray();
            progressPercent = attendanceFileUploader!.ProgressPercent;
            progressTitle = attendanceFileUploader!.ProgressTitle;

            var file = Files.FirstOrDefault();
            if(file != null) {
                var ret = await CsvUtility.ImportFromCSV<AttendanceImportDTO>(file.LocalFile!.FullName);
                if(ret.Item1 != null) {
                    int successCount = 0;
                    foreach(var attendance in ret.Item1) {
                        using (var scope = ServiceScopeFactory.CreateScope()) {
                            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                            var result = await mediator.Send(new CreateAttendanceByImportCommand(attendance));
                            if(result.IsSuccess && result != Guid.Empty)
                                successCount++;
                        }
                    }
                    await DialogService.ShowSuccessAsync($"Imported {successCount} attendances successfully.");
                    await LoadAttendanceAsync(searchDate);
                }
                else 
                    await DialogService.ShowErrorAsync(ret.Item2, "Import Error");                
            }
        }
        catch (Exception) {
            throw;
        }
        finally {
            isBusy = false;
        }
    }   

    private void HandleUsernameFilter(ChangeEventArgs args) {
        if(args.Value is string value)
            barcodeFilter = value;
    }

    private void HandleBarcodeClear() {
        if (string.IsNullOrWhiteSpace(barcodeFilter))
            barcodeFilter = string.Empty;
    }

    private async Task ChangePayrollPeriod(int direction)
    {
        // Convert the current searchDate (a DateTime) to DateOnly.
        var currentDateOnly = new DateOnly(searchDate.Year, searchDate.Month, searchDate.Day);
        var currentPeriod = GlobalService.GetStartDateAndEndDateOfPayslip(currentDateOnly);

        // Use direction: -1 for previous, +1 for next.
        DateOnly newPeriodDate = direction < 0
            ? currentPeriod.startDate.AddDays(-1)   // previous period: one day before the current period starts
            : currentPeriod.endDate.AddDays(1);       // next period: one day after the current period ends

        // Update the searchDate from the new payroll period anchor date.
        searchDate = DateOnly.FromDateTime(new DateTime(newPeriodDate.Year, newPeriodDate.Month, newPeriodDate.Day));

        // Load the payroll data for the new period.
        await LoadAttendanceAsync(searchDate);
    }
}
