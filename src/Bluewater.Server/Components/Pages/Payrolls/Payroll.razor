@page "/payroll"
@rendermode InteractiveServer

@using Bluewater.UseCases.Attendances
@using Bluewater.UseCases.Attendances.Create
@using Bluewater.UseCases.Attendances.List
@using Bluewater.UseCases.Attendances.Update
@using Bluewater.UseCases.Chargings
@using Bluewater.UseCases.Payrolls
@using Bluewater.UseCases.Payrolls.Create
@using Bluewater.UseCases.Payrolls.List
@using Bluewater.UseCases.ServiceCharges
@using Bluewater.UseCases.ServiceCharges.Create
@using Bluewater.UseCases.ServiceCharges.List
@using MediatR
@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@using Bluewater.Server.Global
@using Microsoft.CodeAnalysis.Elfie.Serialization
@using System.Globalization
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<FluentDialogProvider/>
<FluentTooltipProvider />

<PageTitle>Payroll</PageTitle>

<FluentGrid>
    <FluentGridItem xs="6">
        <h3>Payroll</h3>
        <FluentStack HorizontalGap="20" Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">
            <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronLeft())" Appearance="Appearance.Accent" OnClick="@(async() => await LoadPayrollAsync(searchDate = searchDate.AddDays(-15), changedDate: true))"/>
            <h5 style="margin: 0; vertical-align: middle;">from @startDate.ToString("MMM-dd") to @endDate.ToString("MMM-dd")</h5>
            <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronRight())" Appearance="Appearance.Accent" OnClick="@(async() => await LoadPayrollAsync(searchDate = searchDate.AddDays(15), changedDate: true))"/>
        </FluentStack>
    </FluentGridItem>
    <FluentGridItem xs="6">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
            <div>
                <FluentSelect TOption="ChargingDTO"
                    Label="Select a charging"
                    Items="@Chargings"
                    Id="charging-listbox"
                    Placeholder="Make a selection..."
                    OptionValue="@(p => p.Id.ToString())"
                    OptionText="@(p => p.Name)"
                    @bind-SelectedOption="@selectCharging" />
            </div>

            <FluentInputFile @ref="@myFileUploader" 
                 DragDropZoneVisible="false"
                 Mode="InputFileMode.SaveToTemporaryFolder"
                 Multiple="false"
                 AnchorId="MyUploadButton"
                 MaximumFileSize="@(100 * 1024 * 1024)"
                 Accept=".csv"
                 OnProgressChange="@(e =>
                     {
                         progressPercent = e.ProgressPercent; 
                         progressTitle = e.ProgressTitle;
                     })"
                 OnCompleted="@OnCompletedAsync" />
            <FluentProgress Min="0" Max="100" Visible="@(progressPercent > 0)" Value="@progressPercent" />

            <div style="margin-top: 21px;">
                <FluentCounterBadge BackgroundColor="@Color.Error" Color="Color.Fill" Dot="@(serviceChargeData.Count == 0)">
                    <FluentButton Id="MyUploadButton" IconStart="@(new Icons.Regular.Size16.Attach())" Appearance="Appearance.Stealth"/>
                </FluentCounterBadge>
            </div>

            <FluentButton IconStart="@(new Icons.Regular.Size16.Calculator())" Appearance="Appearance.Outline" OnClick="@(async() => await LoadPayrollAsync(searchDate))" Style="margin-top: 20px;">Calculate</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Send())" Appearance="Appearance.Accent" OnClick="@(async() => await SaveAndSubmitAllAsync(searchDate))" Style="margin-top: 20px;">Save & Submit</FluentButton>
        </FluentStack>        
    </FluentGridItem>
</FluentGrid>

<FluentDataGrid Id="payrollsGrid" Items="@Payrolls" TGridItem="PayrollDTO" GridTemplateColumns="1.5fr 0.7fr 0.7fr 0.7fr 0.7fr 0.7fr 0.5fr 0.5fr 0.7fr 0.5fr 0.7fr 0.7fr 0.7fr 0.7fr 0.7fr ">
    <PropertyColumn Title="Name" Property="@(c => c!.Name)" Align="Align.Start" Sortable="true" />
    <PropertyColumn Title="Absences" Property="@(c => c!.Absences)" Align="Align.Center" />
    <PropertyColumn Title="Leaves" Property="@(c => c!.Leaves)" Align="Align.Center" />
    <PropertyColumn Title="Lates" Property="@(c => c!.Lates)" Align="Align.Center" />
    <PropertyColumn Title="Overbreak" Property="@(c => c!.Overbreak)" Align="Align.Center" />
    <PropertyColumn Title="Undertime" Property="@(c => c!.Undertime)" Align="Align.Center" />
    <PropertyColumn Title="SSS" Property="@(c => c!.SSSAmount)" Align="Align.Center" />
    <PropertyColumn Title="Pagibig" Property="@(c => c!.PagibigAmount)" Align="Align.Center" />
    <PropertyColumn Title="PhilHealth" Property="@(c => c!.PhilhealthAmount)" Align="Align.Center" />
    <PropertyColumn Title="Tax" Property="@(c => c!.TaxDeductions)" Align="Align.Center" />
    <PropertyColumn Title="Basic Pay" Property="@(c => c!.BasicPayAmount)" Align="Align.Center" />
    <PropertyColumn Title="Gross" Property="@(c => c!.GrossPayAmount)" Align="Align.Center" />
    <PropertyColumn Title="Deductions" Property="@(c => c!.TotalDeductions)" Align="Align.Center" />
    <PropertyColumn Title="Net" Property="@(c => c!.NetAmount)" Align="Align.Center" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="view item" IconEnd="@(new Icons.Regular.Size16.Search())" OnClick="@(async() => await ViewPayrollAsync(context))"/>
        <FluentButton aria-label="view item" IconEnd="@(new Icons.Regular.Size16.Save())" Appearance="Appearance.Accent" OnClick="@(async() => await SavePayrollAsync(context))" Disabled="@(context.Id == Guid.Empty ? false : true)"/>
    </TemplateColumn>
</FluentDataGrid>

@if (isBusy == true)
{
    <div class="overlay">
        <FluentProgressRing/>
    </div>
}

@code {
    private bool isBusy = false;
    private DateTime searchDate = DateTime.Now;
    private DateOnly startDate;
    private DateOnly endDate;    
    private IQueryable<ChargingDTO> Chargings { get; set; } = default!;
    private ChargingDTO? selectCharging = default!;
    private IQueryable<PayrollDTO> Payrolls { get; set; } = default!;

    FluentInputFile? myFileUploader = default!;
    int? progressPercent;
    string? progressTitle;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    List<ServiceChargeDTO> serviceChargeData = default!;
    protected override async Task OnInitializedAsync()
    {
        Chargings = GlobalService.Chargings.ToList().AsQueryable();
        var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfPayslip(DateOnly.FromDateTime(searchDate));
        startDate = _startDate;
        endDate = _endDate;

        // get the current service charge
        await LoadServiceChargeAsync(endDate);
    }

    async Task LoadServiceChargeAsync(DateOnly date)
    {
        try {
            isBusy = true;

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListServiceChargeQuery(null, null, date));
                if (result.IsSuccess) {
                    // clear out serviceChargeData first
                    if(serviceChargeData != null && serviceChargeData.Any())
                        serviceChargeData.Clear();
                    serviceChargeData = result.Value.ToList();
                }
            }
        } 
        catch (Exception) {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    async Task LoadPayrollAsync(DateTime date, bool changedDate = false)
    {
        try {
            searchDate = date;
            var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfPayslip(DateOnly.FromDateTime(date));
            startDate = _startDate;
            endDate = _endDate;

            await LoadServiceChargeAsync(endDate);
            if(selectCharging == null || selectCharging?.Id == Guid.Empty)
            {
                if(!changedDate)
                    await DialogService.ShowWarningAsync("There's no current charging group selected yet. Please select a charging group first.", "Warning");
                return;
            }
                        
            isBusy = true;

            // get list of payrolls
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListPayrollQuery(null, null, selectCharging!.Name, _startDate, _endDate));
                if (result.IsSuccess)
                    Payrolls = result.Value.AsQueryable();
            }
        } 
        catch (Exception) {
            throw;
        }
        finally {
            isBusy = false;
        }
    }    

    async Task SavePayrollAsync(PayrollDTO item)
    {
        try {
            var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to save and submit this record? Please note that this will lock the submitted attendances.", "Yes", "No", "Save and Submit");
            var conf = await dialog.Result;
            if (conf.Cancelled) return;

            isBusy = true;
            await CreatePayrollAsync(item);
            await LoadPayrollAsync(searchDate);
            isBusy = false;
            await DialogService.ShowSuccessAsync("Payroll and Attendance has been successfully Udpated.", "Success");
        } 
        catch (Exception) {
            throw;
        }
        finally {
        }
    }

    async Task SaveAndSubmitAllAsync(DateTime date)
    {
        try {
            if(Payrolls.Where(i => i.Id == Guid.Empty).Count() == 0) {
                await DialogService.ShowWarningAsync("There's no record to save and submit.", "Warning");
                return;
            }

            var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to save and submit all {Payrolls.Where(i => i.Id == Guid.Empty).Count()} record? Please note that this will lock the submitted attendances.", "Yes", "No", "Save and Submit");
            var conf = await dialog.Result;
            if (conf.Cancelled) return;

            isBusy = true;

            var tasks = Payrolls.Select(p => CreatePayrollAsync(p));
            await Task.WhenAll(tasks);

            await LoadPayrollAsync(date);
        } 
        catch (Exception) {
            throw;
        }
        finally {
            isBusy = false;
        }
    }

    async Task CreatePayrollAsync(PayrollDTO item) {
        if(item.Id != Guid.Empty) return;

        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var result = await mediator.Send(new CreatePayrollCommand(item.EmployeeId ?? Guid.Empty, item.Date, item.GrossPayAmount, item.NetAmount, item.BasicPayAmount, item.SSSAmount, item.SSSERAmount, item.PagibigAmount, item.PagibigERAmount, item.PhilhealthAmount, item.PhilhealthERAmount, item.RestDayAmount, item.RestDayHrs, item.RegularHolidayAmount, item.RegularHolidayHrs, item.SpecialHolidayAmount, item.SpecialHolidayHrs, item.OvertimeAmount, item.OvertimeHrs, item.NightDiffAmount, item.NightDiffHrs, item.NightDiffOvertimeAmount, item.NightDiffOvertimeHrs, item.NightDiffRegularHolidayAmount, item.NightDiffRegularHolidayHrs, item.NightDiffSpecialHolidayAmount, item.NightDiffSpecialHolidayHrs, item.OvertimeRestDayAmount, item.OvertimeRestDayHrs, item.OvertimeRegularHolidayAmount, item.OvertimeRegularHolidayHrs, item.OvertimeSpecialHolidayAmount, item.OvertimeSpecialHolidayHrs, item.UnionDues, item.Absences, item.AbsencesAmount, item.Leaves, item.LeavesAmount, item.Lates, item.LatesAmount, item.Undertime, item.UndertimeAmount, item.Overbreak, item.OverbreakAmount, item.SvcCharge, item.CostOfLivingAllowanceAmount, item.MonthlyAllowanceAmount, item.SalaryUnderpaymentAmount, item.RefundAbsencesAmount, item.RefundUndertimeAmount, item.RefundOvertimeAmount, item.LaborHoursIncome, item.LaborHrs, item.TaxDeductions, item.TotalConstantDeductions, item.TotalLoanDeductions, item.TotalDeductions));
        }  

        if(item.EmployeeId.HasValue) {
            List<AttendanceDTO> attendances = new();
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListAttendanceQuery(null, null, item.EmployeeId ?? Guid.Empty, startDate, endDate));
                if (result.IsSuccess)
                    attendances = result.Value.ToList();
            }

            //var tasks = attendances.Select(a => UpdateAttendanceAsync(a));
            foreach(var attendance in attendances)
            {
                if(attendance.Shift == null || attendance.ShiftId == null || attendance.ShiftId == Guid.Empty)
                    continue;

                if(attendance.Id == Guid.Empty) { // create attendance
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var result = await mediator.Send(new CreateAttendanceCommand(attendance.EmployeeId, attendance.ShiftId, attendance.TimesheetId, attendance.LeaveId, attendance.EntryDate, null, null, null, null, null, IsLocked: true));
                    }
                }
                else { // update
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var result = await mediator.Send(new UpdateAttendanceCommand(attendance.EmployeeId, attendance.ShiftId, attendance.TimesheetId, attendance.LeaveId, attendance.EntryDate, IsLocked: true));
                    }
                }
            }
        }
    }    

    async Task ViewPayrollAsync(PayrollDTO item)
    {
        try
        {
            IDialogReference _dialog = await DialogService.ShowPanelAsync<PayrollPanel>(item, new DialogParameters<PayrollDTO>
            {
                Title = "Payroll Details",
                Alignment = HorizontalAlignment.Right,
                Modal = false,
                PrimaryActionEnabled= item.Id == Guid.Empty,
                PrimaryAction="Save",
                ShowDismiss = true,
                Width = "60%",
            });

            DialogResult result = await _dialog.Result;
            if (result.Cancelled) return;
    
            await SavePayrollAsync(item);            
        }
        catch (Exception)
        {
            throw;
        }
    }

    async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        try {
            // TODO confirmation should be moved to before the upload processing starts
            var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to upload this file?", "Yes", "No", "Upload");
            var conf = await dialog.Result;
            if (conf.Cancelled) return;

            isBusy = true;

            Files = files.ToArray();
            progressPercent = myFileUploader!.ProgressPercent;
            progressTitle = myFileUploader!.ProgressTitle;

            // assume only one file is uploaded
            List<(string, decimal)> csvData = new List<(string, decimal)>();
            foreach (var file in Files)
            {
                // open the file as csv
                using (var reader = new StreamReader(file.LocalFile!.FullName))
                {
                    string? line;
                    bool isFirstRow = true;
                    while ((line = await reader.ReadLineAsync()) != null)
                    {
                        if (isFirstRow)
                        {
                            isFirstRow = false;
                            continue;
                        }

                        var values = line.Split(',');
                        if (values.Length >= 2 && decimal.TryParse(values[1], out decimal amount))
                            csvData.Add((values[0], amount));
                    }
                }
                file.LocalFile?.Delete();
            }

            // create service charge
            var tasks = csvData.Select(data => CreateServiceChargeAsync(data.Item1, data.Item2));
            await Task.WhenAll(tasks);

            // add show success message here
            await LoadServiceChargeAsync(endDate);
            await LoadPayrollAsync(searchDate);
            await DialogService.ShowSuccessAsync("Service charge has been successfully uploaded, and payroll has been refreshed.", "Success");

        }
        finally {
            isBusy = false;
        }
    }

    async Task CreateServiceChargeAsync(string name, decimal amount)
    {
        try {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateServiceChargeCommand(name, amount, endDate));
            }
        } 
        catch (Exception) {
            throw;
        }
    }
}
