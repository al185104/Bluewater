@page "/setting"
@rendermode InteractiveServer
@using Bluewater.Core.EmployeeAggregate.Enum
@using Bluewater.UseCases.Chargings.Delete
@using Bluewater.UseCases.Departments.Delete
@using Bluewater.UseCases.Divisions
@using Bluewater.UseCases.Divisions.Delete
@using Bluewater.UseCases.Divisions.List;
@using Bluewater.UseCases.Divisions.Create;
@using Bluewater.UseCases.Departments;
@using Bluewater.UseCases.Departments.List;
@using Bluewater.UseCases.Departments.Create;
@using Bluewater.UseCases.Employees.Create
@using Bluewater.UseCases.Employees.List
@using Bluewater.UseCases.Holidays.Delete
@using Bluewater.UseCases.Pays.Create
@using Bluewater.UseCases.Positions.Delete
@using Bluewater.UseCases.Schedules.Create
@using Bluewater.UseCases.Sections;
@using Bluewater.UseCases.Sections.Delete
@using Bluewater.UseCases.Sections.List;
@using Bluewater.UseCases.Sections.Create;
@using Bluewater.UseCases.Positions;
@using Bluewater.UseCases.Positions.List;
@using Bluewater.UseCases.Positions.Create;
@using Bluewater.UseCases.Chargings;
@using Bluewater.UseCases.Chargings.List;
@using Bluewater.UseCases.Chargings.Create;
@using Bluewater.UseCases.Holidays;
@using Bluewater.UseCases.Holidays.List;
@using Bluewater.UseCases.Holidays.Create;
@using Bluewater.UseCases.EmployeeTypes;
@using Bluewater.UseCases.EmployeeTypes.Delete;
@using Bluewater.UseCases.EmployeeTypes.List;
@using Bluewater.UseCases.EmployeeTypes.Create;
@using Bluewater.UseCases.Levels;
@using Bluewater.UseCases.Levels.Delete;
@using Bluewater.UseCases.Levels.List;
@using Bluewater.UseCases.Levels.Create;
@using Bluewater.UseCases.Shifts;
@using Bluewater.UseCases.Shifts.Create;

@using Bluewater.Server.Global;

@using Bluewater.UseCases.Shifts.List
@using Bluewater.UseCases.Timesheets.Create
@using Bluewater.UseCases.Users.Create
@using MediatR;
@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<PageTitle>System Settings</PageTitle>

<h3>Team Settings</h3>

<FluentStack Orientation="Orientation.Vertical">

    <FluentButton OnClick="@(async () => await CreateDummyEmployees())">Create Dummy Employees</FluentButton>
    <FluentButton OnClick="@(async () => await CreateDummyShifts())">Create Dummy Shifts</FluentButton>
    <FluentButton OnClick="@(async () => await CreateDummyTimesheet())">Create Dummy Timesheet</FluentButton>
    <FluentButton OnClick="@(async () => await CreateDummySchedule())">Create Dummy Schedule</FluentButton>

    <FluentGrid Spacing="2">
        @* division *@
        <FluentGridItem xs ="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Divisions</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputDivision.Name" Name="divisionName" Label="Division Name" Required />
                        </div>
                        <div style="flex-grow: 1;" >
                            <FluentTextField @bind-Value="InputDivision.Description" Name="divisionDescription" Label="Division Description" Style="flex: 1; width: 100%;" />
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddDivision" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>

                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Divisions" ItemSize="3">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Descriptions" Property="@(p => p.Description)" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteDivisionAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>

        @* department *@
        <FluentGridItem xs="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Departments</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputDepartment.Name" Name="departmentName" Label="Department Name" Required />
                        </div>
                        <div style="flex-grow: 1;">
                            <FluentTextField @bind-Value="InputDepartment.Description" Name="departmentDescription" Label="Department Description" Style="width: 100%;"/>
                        </div>
                        <div style="margin-bottom: 4px">
                            <FluentSelect Items="@Divisions" TOption="DivisionDTO" @onchange="SelectedDivisionOptionChanged" OptionValue="@(i => i.Id.ToString())" OptionText="@(i => i.Name)" Label="Division Classification" Required />
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddDepartment" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>

                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Departments">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Descriptions" Property="@(p => p.Description)" />
                        <PropertyColumn Title="Division" Property="@(p => GetDivisionName(p.DivisionId))" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteDepartmentAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>
        
        @* section *@
        <FluentGridItem xs="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Sections</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputSection.Name" Name="sectionName" Label="Section Name" Required />
                        </div>
                        <div style="flex-grow: 1;">
                            <FluentTextField @bind-Value="InputSection.Description" Name="sectionDescription" Label="Section Description" Style="width: 100%;"/>
                        </div>
                        <div style="margin-bottom: 4px">
                            <FluentSelect Items="@Departments" TOption="DepartmentDTO" @onchange="SelectedDepartmentOptionChanged" OptionValue="@(i => i.Id.ToString())" OptionText="@(i => i.Name)" Label="Department Classification" Required />
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddSection" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>

                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Sections">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Descriptions" Property="@(p => p.Description)" />
                        <PropertyColumn Title="Department" Property="@(p => GetDepartmentName(p.DepartmentId))" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteSectionAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>

        @* position *@
        <FluentGridItem xs="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Positions</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputPosition.Name" Name="positionName" Label="Position Name" Required />
                        </div>
                        <div style="flex-grow: 1;">
                            <FluentTextField @bind-Value="InputPosition.Description" Name="positionDescription" Label="Position Description" Style="width: 100%;"/>
                        </div>
                        <div style="margin-bottom: 4px">
                            <FluentSelect Items="@Sections" TOption="SectionDTO" @onchange="SelectedSectionOptionChanged" OptionValue="@(i => i.Id.ToString())" OptionText="@(i => i.Name)" Label="Section Classification" Required />
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddPosition" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>

                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Positions">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Descriptions" Property="@(p => p.Description)" />
                        <PropertyColumn Title="Section" Property="@(p => GetSectionName(p.SectionId))" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeletePositionAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>

        @* charing *@
        <FluentGridItem xs="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Chargings</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputCharging.Name" Name="chargingName" Label="Charging Name" Required />
                        </div>
                        <div style="flex-grow: 1;">
                            <FluentTextField @bind-Value="InputCharging.Description" Name="chargingDescription" Label="Charging Description" Style="width: 100%;"/>
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddCharging" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>
                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Chargings">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Descriptions" Property="@(p => p.Description)" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteChargingAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>

    <h3>Employee Details</h3>
    <FluentGrid Spacing="2" style="width: 100%;" AdaptiveRendering="true" >
        @* employee types *@
        <FluentGridItem xs="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Employee Types</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputEmployeeType.Name" Name="employeeTypeName" Label="Type Name" Required />
                        </div>
                        <div style="flex-grow: 1;">
                            <FluentTextField @bind-Value="InputEmployeeType.Value" Name="employeeDescription" Label="Type" Style="width: 100%;"/>
                        </div>
                        <div>
                            <FluentSwitch @bind-Value="@InputEmployeeType.IsActive" Label="Status">
                                <span slot="checked-message">Active</span>
                                <span slot="unchecked-message">Inactive</span>
                            </FluentSwitch>
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddEmployeeType" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>
                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@EmployeeTypes">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Value" Property="@(p => p.Value)" />
                        <PropertyColumn Title="Status" Property="@(p => p.IsActive ? "Active" : "Inactive")" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteEmployeeTypeAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>
        <FluentGridItem xs="6">
            <FluentCard MinimalStyle="true" AreaRestricted="false">
                <h5>Employee Levels</h5>
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Bottom">
                        <div>
                            <FluentTextField @bind-Value="InputLevel.Name" Name="employeeLevelName" Label="Level Name" Required />
                        </div>
                        <div style="flex-grow: 1;">
                            <FluentTextField @bind-Value="InputLevel.Value" Name="employeeLevelDescription" Label="Levels" Style="width: 100%;"/>
                        </div>
                        <div>
                            <FluentSwitch @bind-Value="@InputLevel.IsActive" Label="Status">
                                <span slot="checked-message">Active</span>
                                <span slot="unchecked-message">Inactive</span>
                            </FluentSwitch>
                        </div>
                        <FluentButton Loading="@btnLoading" OnClick="@AddLevel" Appearance="Appearance.Accent" Style="margin-bottom: 4px">Add</FluentButton>
                    </FluentStack>
                </div>
                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Levels">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Value" Property="@(p => p.Value)" />
                        <PropertyColumn Title="Status" Property="@(p => p.IsActive ? "Active" : "Inactive")" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteLevelAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentCard>
        </FluentGridItem>

    </FluentGrid>

    <h3>Holidays</h3>

    <FluentCard>
        <h5>Holidays</h5>
        <FluentGrid>
            <FluentGridItem xs="6">
                <div style="height: 300px; overflow:auto;" tabindex="-1">
                    <FluentDataGrid Items="@Holidays">
                        <PropertyColumn Title="Names" Property="@(p => p.Name)" />
                        <PropertyColumn Title="Descriptions" Property="@(p => p.Description)" />
                        <PropertyColumn Title="Date" Property="@(p => p.Date.ToShortDateString())" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteHolidayAsync(context))"/>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </FluentGridItem>
            
            <FluentGridItem xs="3" Style="display: flex; justify-content: stretch ">
                <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Top" VerticalGap="4">
                    <FluentTextField @bind-Value="InputHoliday.Name" Name="holidayName" Label="Holiday Name" Style="width: 100%;" Required />
                    <FluentTextField @bind-Value="InputHoliday.Description" Name="holidayDescription" Label="Holiday Description" Style="width: 100%;" Required />
                    <FluentSwitch @bind-Value="@InputHoliday.IsRegular" Label="Holiday Type">
                        <span slot="checked-message">Regular</span>
                        <span slot="unchecked-message">Special</span>
                    </FluentSwitch>
                    <FluentButton Loading="@btnLoading" OnClick="@AddHoliday" Appearance="Appearance.Accent" Style="margin-bottom: 4px;">Add</FluentButton>
                </FluentStack>
            </FluentGridItem>
            <FluentGridItem xs="3" Style="display: flex; justify-content: center;">
                <FluentCalendar @bind-Value="@SelectedDayStart" View="CalendarViews.Days" Style="height: 250px;" />
            </FluentGridItem>
        </FluentGrid>
    </FluentCard>

</FluentStack>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

<FluentDialogProvider/>

@code {
    bool btnLoading = false;
    bool isBusy = false;
    private DateTime? SelectedDayStart = null;

    public DivisionDTO InputDivision { get; set; } = new();
    public DepartmentDTO InputDepartment { get; set; } = new();
    public SectionDTO InputSection { get; set; } = new();
    public PositionDTO InputPosition { get; set; } = new();
    public ChargingDTO InputCharging { get; set; } = new();
    public HolidayDTO InputHoliday { get; set; } = new();
    public EmployeeTypeDTO InputEmployeeType { get; set; } = new();
    public LevelDTO InputLevel { get; set; } = new();


    public IQueryable<DivisionDTO> Divisions { get; set; } = default!;
    public IQueryable<DepartmentDTO> Departments { get; set; } = default!;
    public IQueryable<SectionDTO> Sections { get; set; } = default!;
    public IQueryable<PositionDTO> Positions { get; set; } = default!;
    public IQueryable<ChargingDTO> Chargings { get; set; } = default!;
    public IQueryable<HolidayDTO> Holidays { get; set; } = default!;
    public IQueryable<EmployeeTypeDTO> EmployeeTypes { get; set; } = default!;
    public IQueryable<LevelDTO> Levels { get; set; } = default!;

    #region Initialize
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isBusy = true;
            await Task.Delay(100);
            Divisions = GlobalService.Divisions.ToList().AsQueryable();
            Departments = GlobalService.Departments.ToList().AsQueryable();
            Sections = GlobalService.Sections.ToList().AsQueryable();
            Positions = GlobalService.Positions.ToList().AsQueryable();
            Chargings = GlobalService.Chargings.ToList().AsQueryable();
            Holidays = GlobalService.Holidays.ToList().AsQueryable();
            EmployeeTypes = GlobalService.EmployeeTypes.ToList().AsQueryable();
            Levels = GlobalService.Levels.ToList().AsQueryable();
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isBusy = false;
        }
    }

    // generic method that gets a list and selects a random index
    private Guid GetRandomId<T>(List<T> list) where T : class
    {
        var random = new Random();
        return list.OrderBy(p => random.Next()).FirstOrDefault()?.GetType().GetProperty("Id")?.GetValue(list.FirstOrDefault()) as Guid? ?? Guid.Empty;
    }

    #endregion

    #region Load Data
    private async Task LoadEmployeeTypes()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListEmployeeTypeQuery(null, null));
                if (result.IsSuccess){
                    EmployeeTypes = result.Value.AsQueryable(); 
                    GlobalService.EmployeeTypes = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadLevels()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListLevelQuery(null, null));
                if (result.IsSuccess){
                    Levels = result.Value.AsQueryable();
                    GlobalService.Levels = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadHolidays()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListHolidayQuery(null, null));
                if (result.IsSuccess) {
                    Holidays = result.Value.AsQueryable();
                    GlobalService.Holidays = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadChargings()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListChargingQuery(null, null));
                if (result.IsSuccess) {
                    Chargings = result.Value.AsQueryable();
                    GlobalService.Chargings = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadPositions()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListPositionsQuery(null, null));
                if (result.IsSuccess) {
                    Positions = result.Value.AsQueryable();
                    GlobalService.Positions = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadSections()
    {
        try
        {
            using(var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListSectionsQuery(null, null));
                if (result.IsSuccess) {
                    Sections = result.Value.AsQueryable();
                    GlobalService.Sections = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListDepartmentsQuery(null, null));
                if (result.IsSuccess) {
                    Departments = result.Value.AsQueryable();
                    GlobalService.Departments = new(result.Value.ToList());
                }
            }
        }
        catch(Exception)
        {
            throw;
        }
    }

    private async Task LoadDivisions()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListDivisionsQuery(null, null));
                if (result.IsSuccess){
                    Divisions = result.Value.AsQueryable();
                    GlobalService.Divisions = new(result.Value.ToList());
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    #endregion

    #region Add Data
    async Task AddLevel()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateLevelCommand(InputLevel.Name, InputLevel.Value, InputLevel.IsActive));
                if (result.IsSuccess)
                {
                    await LoadLevels();
                    InputLevel = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }

    async Task AddEmployeeType()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateEmployeeTypeCommand(InputEmployeeType.Name, InputEmployeeType.Value, InputEmployeeType.IsActive));
                if (result.IsSuccess)
                {
                    await LoadEmployeeTypes();
                    InputEmployeeType = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }
    
    async Task AddHoliday()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateHolidayCommand(InputHoliday.Name, InputHoliday.Description, SelectedDayStart!.Value,  true));
                if (result.IsSuccess)
                {
                    await LoadHolidays();
                    InputHoliday = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }

    async Task AddDivision()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateDivisionCommand(InputDivision.Name, InputDivision.Description));
                if (result.IsSuccess)
                {
                    await LoadDivisions();
                    InputDivision = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }

    async Task AddDepartment()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                if(Divisions == null || Divisions.Count() == 0) return;
                if(selectedDivisionId == Guid.Empty)
                    selectedDivisionId = Divisions.First().Id;

                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateDepartmentCommand(InputDepartment.Name, InputDepartment.Description, selectedDivisionId));
                if (result.IsSuccess)
                {
                    await LoadDepartments();
                    InputDepartment = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }

    async Task AddSection()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                if(Departments == null || Departments.Count() == 0) return;

                if(selectedDepartmentId == Guid.Empty)
                    selectedDepartmentId = Departments.First().Id;

                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateSectionCommand(InputSection.Name, InputSection.Description, string.Empty, string.Empty, string.Empty, selectedDepartmentId));
                if (result.IsSuccess)
                {
                    await LoadSections();
                    InputSection = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }

    async Task AddPosition()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                if(Sections == null || Sections.Count() == 0) return;
                if(selectedSectionId == Guid.Empty)
                    selectedSectionId = Sections.First().Id;

                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreatePositionCommand(InputPosition.Name, InputPosition.Description, selectedSectionId));
                if (result.IsSuccess)
                {
                    await LoadPositions();
                    InputPosition = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }

    async Task AddCharging()
    {
        try
        {
            btnLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateChargingCommand(InputCharging.Name, InputCharging.Description));
                if (result.IsSuccess)
                {
                    await LoadChargings();
                    InputCharging = new();
                }
            }
        }
        finally
        {
            btnLoading = false;
        }
    }
    #endregion

    #region Delete Data
    private async Task DeleteLevelAsync(LevelDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteLevelCommand(item.Id));
                if (result.IsSuccess)
                    await LoadLevels();
            }
        }
        finally
        {
        }
    }

    private async Task DeleteEmployeeTypeAsync(EmployeeTypeDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteEmployeeTypeCommand(item.Id));
                if (result.IsSuccess)
                    await LoadEmployeeTypes();
            }
        }
        finally
        {
        }
    }

    private async Task DeleteDivisionAsync(DivisionDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteDivisionCommand(item.Id));
                if (result.IsSuccess)
                    await LoadDivisions();
            }
        }
        finally
        {
        }
    }

    private async Task DeleteDepartmentAsync(DepartmentDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteDepartmentCommand(item.Id));
                if (result.IsSuccess)
                    await LoadDepartments();
            }
        }
        finally
        {
        }
    }

    private async Task DeleteSectionAsync(SectionDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteSectionCommand(item.Id));
                if (result.IsSuccess)
                    await LoadSections();
            }
        }
        finally
        {
        }
    }

    private async Task DeletePositionAsync(PositionDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeletePositionCommand(item.Id));
                if (result.IsSuccess)
                    await LoadPositions();
            }
        }
        finally
        {
        }
    }

    private async Task DeleteChargingAsync(ChargingDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteChargingCommand(item.Id));
                if (result.IsSuccess)
                    await LoadChargings();
            }
        }
        finally
        {
        }
    }

    private async Task DeleteHolidayAsync(HolidayDTO item)
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteHolidayCommand(item.Id));
                if (result.IsSuccess)
                    await LoadHolidays();
            }
        }
        finally
        {
        }
    }
    #endregion

    #region Private Methods
    private async Task CreateDummyEmployees()
    {
        int dummyCount = 0;
        try
        {
            isBusy = true;
            // Create sample employees
            for (int i = 0; i < 100; i++)
            {
                var payId = Guid.Empty;
                using(var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    // Generate dummy PayId using CreatePayCommand
                    var payCommand = new CreatePayCommand(
                        basicPay: 1500 + (i * 100), // Example variation
                        dailyRate: 200 + (i * 10),
                        hourlyRate: 25 + (i * 5),
                        hdmfCon: 100,
                        hdmfEr: 50
                    );
                    var result = await mediator.Send(payCommand);
                    if (result.IsSuccess) {
                        payId = result.Value;
                    }
                }
                if (payId == Guid.Empty) continue;

                var userId = Guid.Empty;
                using(var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    // Generate dummy UserId using CreateUserCommand
                    var userCommand = new CreateUserCommand(
                        Username: $"user{i + 1}",
                        PasswordHash: "1234",
                        Credential: Bluewater.Core.UserAggregate.Enum.Credential.Employee, // Set as needed
                        SupervisedGroup: null,
                        isGlobalSupervisor: i % 2 == 0
                    );
                    var result = await mediator.Send(userCommand);
                    if (result.IsSuccess) {
                        userId = result.Value;
                    }
                }

                // Create CreateEmployeeCommand with dummy data
                var employee = new CreateEmployeeCommand(
                    FirstName: $"FirstName{i + 1}",
                    LastName: $"LastName{i + 1}",
                    MiddleName: null,
                    DateOfBirth: new DateTime(1990, 1, 1).AddYears(i),
                    Gender: Gender.Male,
                    CivilStatus: CivilStatus.Single,
                    BloodType: BloodType.ABNegative,
                    Status: Status.Active,
                    Height: 170 + i,
                    Weight: 70 + i,
                    ImageUrl: null,
                    Remarks: $"Employee {i + 1} is a sample entry.",
                    ContactInfo: new ContactInfo(
                        Email: $"employee{i + 1}@example.com",
                        TelNumber: null,
                        MobileNumber: $"0917123456{i}",
                        Address: $"123 Street {i + 1}",
                        ProvincialAddress: $"Province {i + 1}",
                        MothersMaidenName: $"Mother{i + 1}",
                        FathersName: $"Father{i + 1}",
                        EmergencyContact: $"Emergency{i + 1}",
                        RelationshipContact: "Friend",
                        addressContact: $"Contact Address {i + 1}",
                        TelNoContact: "1234567890",
                        MobileNoContact: $"0917890123{i}"
                    ),
                    EducationInfo: new EducationInfo(
                        EducationalAttainment: EducationalAttainment.College,
                        CourseGraduated: $"Course {i + 1}",
                        UniversityGraduated: $"University {i + 1}"
                    ),
                    EmploymentInfo: new EmploymentInfo(
                        DateHired: DateTime.Now.AddYears(-2).AddMonths(i),
                        DateRegularized: DateTime.Now.AddYears(-1).AddMonths(i),
                        DateResigned: null,
                        DateTerminated: null,
                        TinNo: $"123456789{i}",
                        SssNo: $"987654321{i}",
                        HdmfNo: $"11223344{i}",
                        PhicNo: $"55667788{i}",
                        BankAccount: $"123456789{i}",
                        HasServiceCharge: i % 2 == 0
                    ),
                    UserId: userId,
                    PositionId: GetRandomId(Positions.ToList()),
                    PayId: payId,
                    TypeId: GetRandomId(EmployeeTypes.ToList()),
                    LevelId: GetRandomId(Levels.ToList()),
                    ChargingId: GetRandomId(Chargings.ToList())
                );

                using (var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    var result = await mediator.Send(employee);
                    if (result.IsSuccess) {
                        dummyCount++;
                    }
                }
            }
        }
        finally
        {
            isBusy = false;
            await DialogService.ShowSuccessAsync($"{dummyCount} dummy employees were created successfully.");
        }
    }
    private async Task CreateDummyShifts() {
        int dummyCount = 0;
        try{
            isBusy = true;
            var shifts = new List<CreateShiftCommand>();
            var random = new Random();
            for (int i = 1; i <= 20; i++)
            {
                // Vary start times slightly
                var shiftStartTime = new TimeOnly(7 + (i % 3), 30);  // Start times vary between 7:30 AM, 8:30 AM, and 9:30 AM
                var shiftEndTime = shiftStartTime.AddHours(8);        // Assuming 8-hour shifts for simplicity

                // Generate break times with variation within each shift
                var breakStartHour = shiftStartTime.Hour + 3 + (i % 2);  // Break starts 3-4 hours after shift start
                var breakStartMinute = random.Next(0, 60);               // Random minute within the hour
                var shiftBreakTime = new TimeOnly(breakStartHour, breakStartMinute);

                var breakEndHour = breakStartHour + 1;                   // Break is typically 1 hour
                var breakEndMinute = (breakStartMinute + random.Next(10, 50)) % 60;
                var shiftBreakEndTime = new TimeOnly(breakEndHour, breakEndMinute);

                // Create the command for each shift with a unique name and 1-hour break
                var shift = new CreateShiftCommand(
                    Name: $"A{i}",                     // Shift name, e.g., A1, A2, etc.
                    ShiftStartTime: shiftStartTime,
                    ShiftBreakTime: shiftBreakTime,
                    ShiftBreakEndTime: shiftBreakEndTime,
                    ShiftEndTime: shiftEndTime,
                    BreakHours: 1.0m                   // 1-hour break as specified
                );

                using (var scope = ServiceScopeFactory.CreateScope())
                {
                    var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                    var result = await mediator.Send(shift);
                    if (result.IsSuccess) {
                        dummyCount++;
                    }
                }
            }
        }
        finally {
            isBusy = false;
            await DialogService.ShowSuccessAsync($"{dummyCount} dummy shifts were created successfully.");
        }
    }

    private async Task CreateDummyTimesheet() {
        int dummyCount = 0;
        try {
            isBusy = true;

            // get all employees
            List<Guid> employeeIds = new();
            using(var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListEmployeeQuery(null, null));
                if (result.IsSuccess) {
                    employeeIds = result.Value.Select(e => e.Id).ToList();
                }
            }

            var random = new Random();
            foreach (var employeeId in employeeIds)
            {
                for (DateTime date = new DateTime(2024, 9, 1); date <= new DateTime(2024, 11, 10); date = date.AddDays(1))
                {
                    // Generate random times for TimeIn and TimeOut
                    var timeIn1 = date.AddHours(8).AddMinutes(random.Next(0, 30)); // 8:00 - 8:30 AM
                    var timeOut1 = timeIn1.AddHours(4).AddMinutes(random.Next(0, 15)); // 4 hours later with slight variation

                    // Optional afternoon session
                    DateTime? timeIn2 = timeOut1.AddHours(1).AddMinutes(random.Next(0, 30)); // 1-hour lunch break, then 1:00 - 1:30 PM
                    DateTime? timeOut2 = timeIn2?.AddHours(4).AddMinutes(random.Next(0, 15)); // 4 hours after timeIn2

                    // Create a timesheet command for the current date
                    var timesheet = new CreateTimesheetCommand(
                        employeeId: employeeId,
                        timeIn1: timeIn1,
                        timeOut1: timeOut1,
                        timeIn2: timeIn2,
                        timeOut2: timeOut2,
                        entryDate: DateOnly.FromDateTime(date)
                    );

                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var result = await mediator.Send(timesheet);
                        if (result.IsSuccess) {
                            dummyCount++;
                        }
                    }
                }
            }            
        }
        finally {
            isBusy = false;
            await DialogService.ShowSuccessAsync($"{dummyCount} dummy timesheets were created successfully.");
        }
    }
    
    private async Task CreateDummySchedule() {
        int dummyCount = 0;
        try {
            isBusy = true;

            // get all employees
            List<Guid> employeeIds = new();
            using(var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListEmployeeQuery(null, null));
                if (result.IsSuccess) {
                    employeeIds = result.Value.Select(e => e.Id).ToList();
                }
            }

            // get all shifts
            List<Guid> shiftIds = new();
            using(var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new ListShiftQuery(null, null));
                if (result.IsSuccess) {
                    shiftIds = result.Value.Select(e => e.Id).ToList();
                }
            }

            var random = new Random();
            foreach (var employeeId in employeeIds)
            {
                // loop through days of the week and add shifts on 5 out of 7 days
                for (int i = 1; i <= 5; i++)
                {
                    // Generate random shift for the employee
                    var shiftId = shiftIds[random.Next(0, shiftIds.Count)];

                    // Create a schedule command for the current date
                    var schedule = new CreateScheduleCommand(
                        EmployeeId: employeeId,
                        ShiftId: shiftId,
                        ScheduleDate: DateOnly.FromDateTime(new DateTime(2024, 1, i)),
                        IsDefault: true
                    );

                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                        var result = await mediator.Send(schedule);
                        if (result.IsSuccess)
                            dummyCount++;
                    }
                }
            }            
        }
        finally {
            isBusy = false;
            await DialogService.ShowSuccessAsync($"{dummyCount} dummy schedules were created successfully.");
        }
    }

    private string GetDivisionName(Guid divisionId)
    {
        var division = Divisions.FirstOrDefault(d => d.Id == divisionId);
        return division?.Name ?? "Unknown";
    }

    private Guid selectedDivisionId = Guid.Empty;
    private void SelectedDivisionOptionChanged(ChangeEventArgs e)
    {
        if (e.Value != null && Guid.TryParse(e.Value?.ToString(), out var selectedId))
            selectedDivisionId = selectedId;
    }

    private string GetDepartmentName(Guid departmentId)
    {
        var department = Departments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Name ?? "Unknown";
    }

    private Guid selectedDepartmentId = Guid.Empty;
    private void SelectedDepartmentOptionChanged(ChangeEventArgs e)
    {
        if (e.Value != null && Guid.TryParse(e.Value?.ToString(), out var selectedId))
            selectedDepartmentId = selectedId;
    }

    private string GetSectionName(Guid sectionId)
    {
        var section = Sections.FirstOrDefault(d => d.Id == sectionId);
        return section?.Name ?? "Unknown";
    }

    private Guid selectedSectionId = Guid.Empty;
    private void SelectedSectionOptionChanged(ChangeEventArgs e)
    {
        if (e.Value != null && Guid.TryParse(e.Value?.ToString(), out var selectedId))
            selectedSectionId = selectedId;
    }
    #endregion
}