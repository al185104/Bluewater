@page "/timesheet"
@rendermode InteractiveServer

@using Bluewater.Server.Global
@using Bluewater.UseCases.Timesheets
@using Bluewater.UseCases.Timesheets.Create
@using Bluewater.UseCases.Timesheets.Delete
@using Bluewater.UseCases.Timesheets.List
@using Bluewater.UseCases.Timesheets.Update
@using MediatR
@using Microsoft.FluentUI.AspNetCore.Components.Extensions

@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<PageTitle>Timesheet</PageTitle>

<h3>Timesheet</h3>
<FluentGrid>
    <FluentGridItem xs="4">
        <FluentStack HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Horizontal">            
            <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronLeft())" Appearance="Appearance.Accent" OnClick="@(async() => await ChangePayrollPeriod(-1))"/>
            <h5 style="margin: 0; vertical-align: middle;">from @startDate.ToString("MMM-dd") to @endDate.ToString("MMM-dd")</h5>
            <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronRight())" Appearance="Appearance.Accent" OnClick="@(async() => await ChangePayrollPeriod(1))"/>
        </FluentStack>
    </FluentGridItem>
    <FluentGridItem xs="8">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Top">
            <FluentLabel Style="margin-top: 0px;"><strong>Employee: @EmployeeTimesheets?.Name</strong></FluentLabel>
            <FluentLabel>Department: @EmployeeTimesheets?.Department</FluentLabel>
            <FluentLabel>Section: @EmployeeTimesheets?.Section</FluentLabel>
            <FluentLabel Style="margin-bottom: 0px;">Charging: @EmployeeTimesheets?.Charging</FluentLabel>
        </FluentStack>
    </FluentGridItem>
</FluentGrid>



<FluentSearch Autofocus=true @onchange="@(async(args) => await HandleEmployeeFilter(args))" @bind-Value=nameFilter @bind-Value:after="HandleClear" Placeholder="Employee name or id..." Style="width: 100%;" />

<FluentDataGrid Items="@Timesheets" GridTemplateColumns="0.5fr 0.5fr 1fr 1fr 1fr 1fr 0.5fr" TGridItem="TimesheetInfo">
    <PropertyColumn Title="Date" Property="@(p => p.EntryDate)" Format="MMM-dd" Sortable="true"/>
    <PropertyColumn Title="Day of Week" Property="@(p => p.EntryDate)" Format="dddd" />
    <TemplateColumn Title="Time in #1">
        <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy" @bind-Value="@context.TimeIn1" />
        <FluentTimePicker Style="width: 120px;" @bind-Value="@context.TimeIn1" />
    </TemplateColumn>
    <TemplateColumn Title="Time out #1">
        <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy" @bind-Value="@context.TimeOut1" />
        <FluentTimePicker Style="width: 120px;" @bind-Value="@context.TimeOut1" />        
        @* <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy"/>
        <FluentTimePicker Value="@context!.TimeOut1" ValueChanged="@(e => context!.TimeOut1 = context!.EntryDate?.ToDateTime(ToTimeOnly(e)))" Style="width: 100px"/> *@
    </TemplateColumn>
    <TemplateColumn Title="Time in #2">
        <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy" @bind-Value="@context.TimeIn2" />
        <FluentTimePicker Style="width: 120px;" @bind-Value="@context.TimeIn2" />
        @* <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy"/>
        <FluentTimePicker Value="@context!.TimeIn2" ValueChanged="@(e => context!.TimeIn2 = context!.EntryDate?.ToDateTime(ToTimeOnly(e)))" Style="width: 100px"/> *@
    </TemplateColumn>
    <TemplateColumn Title="Time out #2">
        <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy" @bind-Value="@context.TimeOut2" />
        <FluentTimePicker Style="width: 120px;" @bind-Value="@context.TimeOut2" />
        @* <FluentDatePicker Style="width: 120px;" Format="MM-dd-yy"/>
        <FluentTimePicker Value="@context!.TimeOut2" ValueChanged="@(e => context!.TimeOut2 = context!.EntryDate?.ToDateTime(ToTimeOnly(e)))" Style="width: 100px"/> *@
    </TemplateColumn>    
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeleteTimesheetAsync(context))" />
        <FluentButton aria-label="Save item" IconEnd="@(new Icons.Regular.Size16.Save())" OnClick="@(async() => await SaveTimesheetAsync(context))"/>
    </TemplateColumn>    
</FluentDataGrid>

<FluentDialogProvider/>

@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code{

    private bool isBusy = false;
    private DateTime searchDate = DateTime.Now;
    private DateOnly startDate, endDate;
    private EmployeeTimesheetDTO EmployeeTimesheets = default!;
    private IQueryable<TimesheetInfo> Timesheets = default!;
    string nameFilter = string.Empty;

    protected override void OnInitialized()
    {
        var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfPayslip(DateOnly.FromDateTime(searchDate));
        startDate = _startDate;
        endDate = _endDate;

        base.OnInitialized();
    }

    async Task LoadTimesheetAsync(DateTime date)
    {
        var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfPayslip(DateOnly.FromDateTime(date));
        startDate = _startDate;
        endDate = _endDate;

        if(string.IsNullOrEmpty(nameFilter)) return;

        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var result = await mediator.Send(new ListTimesheetQuery(null, null, nameFilter, _startDate, _endDate));
            if (result.IsSuccess) {
                EmployeeTimesheets = result.Value;
                Timesheets = EmployeeTimesheets.Timesheets.AsQueryable();
            }
        }
    }

    private async Task HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value){
            nameFilter = value;
            await LoadTimesheetAsync(searchDate);
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }

    private TimeOnly ToTimeOnly(DateTime? dateTime)
    {
        return dateTime.HasValue ? TimeOnly.FromDateTime(dateTime.Value) : default;
    }

    private async Task AllowEditTimesheetAsync(TimesheetInfo context)
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to edit a locked daily time record for {context.EntryDate?.ToString("MMMM - dd, dddd")}?", "Yes", "No", "Edit");
        var conf = await dialog.Result;
        if (conf.Cancelled) return;  

        context.IsEdited = true;
    }

    private async Task SaveTimesheetAsync(TimesheetInfo context) {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to override daily time record for {context.EntryDate?.ToString("MMMM - dd, dddd")}?", "Yes", "No", "Save");
        var conf = await dialog.Result;
        if (conf.Cancelled) return; 

        if(context.TimesheetId == Guid.Empty) {
            // create new timesheet
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new CreateTimesheetCommand(EmployeeTimesheets.EmployeeId, context.TimeIn1, context.TimeOut1, context.TimeIn2, context.TimeOut2, context!.EntryDate));
                if (result.IsSuccess) {
                    context.IsEdited = false;
                }
            }            
        }
        else {
            // update existing timesheet
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new UpdateTimesheetCommand(context.TimesheetId, EmployeeTimesheets.EmployeeId, context.TimeIn1, context.TimeOut1, context.TimeIn2, context.TimeOut2, context!.EntryDate, isLocked: true));
                if (result.IsSuccess) {
                    context.IsEdited = false;
                }
            }
        }
    }

    private async Task DeleteTimesheetAsync(TimesheetInfo context)
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to delete daily time record for {context.EntryDate?.ToString("MMMM - dd, dddd")}?", "Yes", "No", "Save");
        var conf = await dialog.Result;
        if (conf.Cancelled) return;

        if(context.TimesheetId != Guid.Empty)
        {
            // delete existing timesheet
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var result = await mediator.Send(new DeleteTimesheetCommand(context.TimesheetId));

                if (result.IsSuccess)
                    await LoadTimesheetAsync(searchDate);
            }
        }
    }

    private DateTime? GetDateValue(DateTime? item)
    {
        @* return DateOnly.FromDateTime(item.Value ?? DateTime.Now).ToDateTime(TimeOnly.MinValue); *@
        if(item.HasValue) 
            return DateOnly.FromDateTime(item.Value).ToDateTime(TimeOnly.MinValue);
        return DateTime.Today;
    }

    // Returns the time portion of TimeIn as a TimeSpan, or null if TimeIn is null.
    private TimeOnly? GetTimeValue(DateTime? item)
    {
        if(item.HasValue)
            return TimeOnly.FromDateTime(item.Value);
        return null;
    }

    // Updates the date portion of TimeIn while preserving the time.
    private void UpdateDate(DateTime? item, DateTime? newDate)
    {
        if (newDate == null)
            item = null;
        else if (item.HasValue)
        {
            var currentTime = TimeOnly.FromDateTime(item.Value);
            item = new DateTime(newDate.Value.Year, newDate.Value.Month, newDate.Value.Day,
                currentTime.Hour, currentTime.Minute, currentTime.Second);
        }
        else
        {
            var today = DateTime.Today;
            item = new DateTime(newDate.Value.Year, newDate.Value.Month, newDate.Value.Day,
                today.TimeOfDay.Hours, today.TimeOfDay.Minutes, today.TimeOfDay.Seconds);
        }

        StateHasChanged();
    }

    // Updates the time portion of TimeIn while preserving the date.
    private void UpdateTime(DateTime? item, DateTime? newTime)
    {
        if (newTime == null)
            item = null;
        else if (item.HasValue)
        {
            var dt = item.Value;
            item = new DateTime(dt.Year, dt.Month, dt.Day,
                newTime.Value.TimeOfDay.Hours, newTime.Value.TimeOfDay.Minutes, newTime.Value.TimeOfDay.Seconds);
        }
        else
        {
            var today = DateTime.Today;
            item = new DateTime(today.Year, today.Month, today.Day,
                newTime.Value.TimeOfDay.Hours, newTime.Value.TimeOfDay.Minutes, newTime.Value.TimeOfDay.Seconds);
        }

        StateHasChanged();
    }

    private async Task ChangePayrollPeriod(int direction)
    {
        // Convert the current searchDate (a DateTime) to DateOnly.
        var currentDateOnly = new DateOnly(searchDate.Year, searchDate.Month, searchDate.Day);
        var currentPeriod = GlobalService.GetStartDateAndEndDateOfPayslip(currentDateOnly);

        // Use direction: -1 for previous, +1 for next.
        DateOnly newPeriodDate = direction < 0
            ? currentPeriod.startDate.AddDays(-1)   // previous period: one day before the current period starts
            : currentPeriod.endDate.AddDays(1);       // next period: one day after the current period ends

        // Update the searchDate from the new payroll period anchor date.
        searchDate = new DateTime(newPeriodDate.Year, newPeriodDate.Month, newPeriodDate.Day);

        // Load the payroll data for the new period.
        await LoadTimesheetAsync(searchDate);
    }
}