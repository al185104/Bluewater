@page "/timesheet"
@rendermode InteractiveServer

@using Bluewater.Server.Global
@using Bluewater.UseCases.Timesheets
@using Bluewater.UseCases.Timesheets.List
@using MediatR
@inject IServiceScopeFactory ServiceScopeFactory
@inject IMediator Mediator
@inject IGlobalService GlobalService
@inject IDialogService DialogService

<FluentDialogProvider/>

<PageTitle>Schedules</PageTitle>

<h3>Schedules</h3>

<FluentStack HorizontalGap="20" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">
    <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronLeft())" Appearance="Appearance.Accent" OnClick="@(async() => await LoadTimesheetAsync(searchDate = searchDate.AddDays(-7)))"/>
    <h5 style="margin: 0; vertical-align: middle;">from @startDate.ToString("MMM-dd") to @endDate.ToString("MMM-dd")</h5>
    <FluentButton IconStart="@(new Icons.Regular.Size16.ChevronRight())" Appearance="Appearance.Accent" OnClick="@(async() => await LoadTimesheetAsync(searchDate = searchDate.AddDays(7)))"/>
</FluentStack>

<FluentDataGrid Items="@FilteredItems" Pagination="@pagination"
    Style="height: 550px;overflow:auto;"
    GridTemplateColumns="1fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.6fr 0.3fr">
    <PropertyColumn Title="Employee" Property="@(p => p.Name)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus=true @bind-Value=nameFilter @oninput="HandleEmployeeFilter" @bind-Value:after="HandleClear" Placeholder="Employee name..." Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Title="Department" Property="@(p => p.Department)" Sortable="true"/>
    <PropertyColumn Title="Section" Property="@(p => p.Section)" Sortable="true"/>
    <PropertyColumn Title="Charging" Property="@(p => p.Charging)" Sortable="true"/>
    <PropertyColumn Title="Total Work Hours" Property="@(p => p.TotalWorkHours)" Sortable="true"/>
    <PropertyColumn Title="Total Break" Property="@(p => p.TotalBreak)" Sortable="true"/>
    <PropertyColumn Title="Total Lates" Property="@(p => p.TotalLates)" Sortable="true"/>
    <PropertyColumn Title="Total Absents" Property="@(p => p.TotalAbsents)" Sortable="true"/>
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(async() => await EditTimesheetAsync(context))"/>
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination" />


@if (isBusy)
{
    <div class="overlay">
        <FluentProgressRing />
    </div>
}

@code{
    private bool isBusy = false;
    private DateTime searchDate = DateTime.Now;
    private DateOnly startDate, endDate;
    private IQueryable<AllEmployeeTimesheetDTO> EmployeeSchedules = default!;

    string nameFilter = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<AllEmployeeTimesheetDTO>? FilteredItems
    {
        get
        {
            var result = EmployeeSchedules;
            if (result is not null && !string.IsNullOrEmpty(nameFilter))
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            return result;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try {
            isBusy = true;
            await Task.Delay(100);
            await LoadTimesheetAsync(searchDate);
        }
        finally
        {
            isBusy = false;
        }
    }

    async Task LoadTimesheetAsync(DateTime date)
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var (_startDate, _endDate) = GlobalService.GetStartDateAndEndDateOfWeekByDate(date);
            startDate = _startDate;
            endDate = _endDate;            
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            var result = await mediator.Send(new ListAllTimesheetQuery(null, null, _startDate, _endDate));
            if (result.IsSuccess)
                EmployeeSchedules = result.Value.AsQueryable();
        }
    }

    private void HandleEmployeeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
            nameFilter = value;
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }

    async Task EditTimesheetAsync(AllEmployeeTimesheetDTO context)
    {
        await Task.Delay(100);
        @* IDialogReference _dialog = await DialogService.ShowPanelAsync<ScheduleForm>(sched, new DialogParameters<ScheduleFormDTO>
        {
            Title = anySchedId ? "Update schedule" : "Create Schedule",
            Alignment = HorizontalAlignment.Right,
            Content = sched,
            Modal = false,
            ShowDismiss = true,
            PrimaryAction = anySchedId ? "Update" : "Create",
            SecondaryAction = "Cancel",
            Width = "30%",
        });

        DialogResult result = await _dialog.Result;
        await HandleUpdatePanelAsync(result); *@
    }

    async Task HandleUpdatePanelAsync(DialogResult result) {
        await Task.Delay(100);
    }

}