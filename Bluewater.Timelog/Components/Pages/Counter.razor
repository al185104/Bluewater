@page "/2"
@implements IDisposable

<style>
    /* Page Background */
    .page-background {
        background-color: #f0f0f0;
        min-height: 100vh;
        padding: 2rem;
    }

    /* Left Column Styles */
    .left-column {
        background-color: #ffffff;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        height: 100%;
    }

        .left-column h2 {
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .left-column .current-date {
            font-weight: 500;
            margin-bottom: 1.5rem;
            color: #555;
        }

    .employee-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding: 0.5rem 0;
    }

        .employee-item:last-child {
            border-bottom: none;
        }

    .employee-time {
        font-size: 0.9rem;
        color: #666;
    }

    .employee-arrow {
        color: #999;
    }

    /* Right Column Styles */
    .right-column {
        background-color: #ffffff;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .welcome-header {
        font-weight: 600;
        font-size: 1.4rem;
        margin-bottom: 1rem;
    }

    .clock-display {
        font-size: 4rem;
        font-weight: 300;
        color: #333;
        text-align: center;
        margin: 2rem 0;
    }

    /* Buttons */
    .status-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn-scan-in {
        background-color: #e67e22; /* Orange */
        border: none;
        font-size: 1.1rem;
        padding: 1rem 2rem;
        color: #fff;
        font-weight: 500;
        transition: transform 0.2s;
    }

        .btn-scan-in:hover {
            background-color: #cf6e15;
            transform: scale(1.02);
        }

    .btn-scan-out {
        background-color: #7f8c8d; /* Gray */
        border: none;
        font-size: 1.1rem;
        padding: 1rem 2rem;
        color: #fff;
        font-weight: 500;
        transition: transform 0.2s;
    }

        .btn-scan-out:hover {
            background-color: #707b7c;
            transform: scale(1.02);
        }

    /* Error Alert */
    .error-alert {
        margin-top: 1rem;
    }

    /* Responsive Adjustments */
    @@media (max-width: 992px) {
        .row-height

    {
        flex-direction: column;
    }

    .left-column,
    .right-column {
        margin-bottom: 1rem;
        height: auto;
    }

    }
</style>

<div class="page-background">
    <div class="container-fluid">
        <div class="row row-height">
            <!-- Left Column: Daily Time Records -->
            <div class="col-lg-4 col-md-5 col-sm-12 left-column">
                <h2>DAILY TIME RECORD</h2>
                <div class="current-date">@CurrentDate</div>
                @if (EmployeeRecords.Any())
                {
                    @foreach (var record in EmployeeRecords)
                    {
                        <div class="employee-item">
                            <div>
                                <div>@record.Name</div>
                                <div class="employee-time">@record.TimeStamp.ToString("HH:mm:ss")</div>
                            </div>
                            <div>
                                @if (record.Status == "In")
                                {
                                    <i class="bi bi-door-open text-success fs-5" title="Checked In"></i>
                                }
                                else if (record.Status == "Out")
                                {
                                    <i class="bi bi-door-closed text-danger fs-5" title="Checked Out"></i>
                                }
                                <!-- Optional arrow to mimic the screenshot's chevron -->
                                <i class="bi bi-chevron-right employee-arrow ms-2"></i>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div>No records yet.</div>
                }
            </div>

            <!-- Right Column: Welcome, Clock, and Action Buttons -->
            <div class="col-lg-8 col-md-7 col-sm-12 right-column">
                <div>
                    <div class="welcome-header">Welcome to Gate 1</div>
                    <div class="lead text-muted mb-4">Scan your barcode to log your attendance.</div>

                    <!-- Large Live Clock -->
                    <div class="clock-display">@CurrentTime.ToString("HH:mm:ss")</div>
                </div>

                <div>
                    <!-- Toggle Buttons for Scan Mode -->
                    <div class="status-buttons">
                        <button class="btn btn-scan-in" @onclick="() => SetScanMode(ScanModeEnum.In)">
                            <i class="bi bi-arrow-right-circle me-2"></i> SCAN IN
                        </button>
                        <button class="btn btn-scan-out" @onclick="() => SetScanMode(ScanModeEnum.Out)">
                            <i class="bi bi-arrow-left-circle me-2"></i> SCAN OUT
                        </button>
                    </div>

                    <!-- Error Alert -->
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show error-alert" role="alert">
                            @ErrorMessage
                            <button type="button" class="btn-close" @onclick="() => ErrorMessage = string.Empty"></button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Enumeration for scan mode
    enum ScanModeEnum
    {
        In,
        Out
    }

    // Track current scan mode; default is "In"
    private ScanModeEnum ScanMode = ScanModeEnum.In;

    // Model for employee record
    public class EmployeeRecord
    {
        public string Name { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty; // "In" or "Out"
        public DateTime TimeStamp { get; set; }
    }

    // Collection of the latest 20 employee records
    private List<EmployeeRecord> EmployeeRecords = new List<EmployeeRecord>();

    // Running clock
    private DateTime CurrentTime = DateTime.Now;
    private System.Threading.Timer? _timer;

    // Show today's date in a friendly format
    private string CurrentDate => DateTime.Now.ToString("dddd, dd MMMM yyyy");

    // Error message for exceptions
    private string ErrorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Start a timer that updates the live clock every second
        _timer = new System.Threading.Timer(UpdateClock, null, 0, 1000);
    }

    private void UpdateClock(object? state)
    {
        CurrentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    private void SetScanMode(ScanModeEnum mode)
    {
        ScanMode = mode;
    }

    // Dummy method to simulate a barcode scan event
    private async Task BarcodeScannedAsync()
    {
        try
        {
            // Simulate delay (e.g., reading barcode data)
            await Task.Delay(500);

            // Generate a random employee name for demo
            string employeeName = $"Employee {new Random().Next(1, 100)}";

            // Create a new record with the current scan mode
            var newRecord = new EmployeeRecord
                {
                    Name = employeeName,
                    Status = (ScanMode == ScanModeEnum.In) ? "In" : "Out",
                    TimeStamp = DateTime.Now
                };

            // Insert at the top (index 0)
            EmployeeRecords.Insert(0, newRecord);

            // Keep only the latest 20 records
            if (EmployeeRecords.Count > 20)
            {
                EmployeeRecords.RemoveAt(EmployeeRecords.Count - 1);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Display error message
            ErrorMessage = $"Error processing barcode: {ex.Message}";
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
